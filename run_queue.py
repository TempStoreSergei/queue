import json
import datetime
from typing import Any, Dict
import redis
from driver import AtolDriver, AtolDriverError
from libfptr10 import IFptr
from settings import settings
from logger import logger


class CommandProcessor:
    """–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –∫–æ–º–∞–Ω–¥ –¥–ª—è –ö–ö–¢ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –∏–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏–∏"""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Å –¥—Ä–∞–π–≤–µ—Ä–æ–º –ö–ö–¢"""
        self.driver = AtolDriver()
        self.fptr = self.driver.fptr

    def _check_result(self, result: int, operation: str):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥—Ä–∞–π–≤–µ—Ä–∞"""
        if result < 0:
            error_description = self.fptr.errorDescription()
            error_code = self.fptr.errorCode()
            raise AtolDriverError(f"–û—à–∏–±–∫–∞ {operation}: {error_description}", error_code=error_code)

    def _play_beep(self, frequency: int = 2000, duration: int = 100):
        """
        –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫–æ–≤–æ–π —Å–∏–≥–Ω–∞–ª

        Args:
            frequency: –ß–∞—Å—Ç–æ—Ç–∞ –≤ –ì—Ü
            duration: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º—Å
        """
        self.fptr.setParam(IFptr.LIBFPTR_PARAM_FREQUENCY, frequency)
        self.fptr.setParam(IFptr.LIBFPTR_PARAM_DURATION, duration)
        self._check_result(self.fptr.beep(), "–ø–æ–¥–∞—á–∏ –∑–≤—É–∫–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞")

    def _play_arcane_melody(self):
        """
        –°—ã–≥—Ä–∞—Ç—å –º–µ–ª–æ–¥–∏—é "Enemy" –∏–∑ Arcane (Imagine Dragons feat. JID)

        üéµ I wake up to the sounds of the silence that allows... üéµ
        """
        logger.info("üéµ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–∏–≥—Ä—ã–≤–∞—Ç—å 'Enemy' –∏–∑ Arcane!")

        # –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è –º–µ–ª–æ–¥–∏—è "Enemy" - –≥–ª–∞–≤–Ω–∞—è —Ç–µ–º–∞
        # –§–æ—Ä–º–∞—Ç: (—á–∞—Å—Ç–æ—Ç–∞ –≤ –ì—Ü, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º—Å)
        melody = [
            # "Look out for yourself"
            (392, 200),  # G4
            (392, 200),  # G4
            (440, 300),  # A4
            (392, 200),  # G4
            (100, 150),  # –ü–∞—É–∑–∞

            # "I wake up to the sounds"
            (349, 200),  # F4
            (392, 200),  # G4
            (440, 200),  # A4
            (494, 400),  # B4
            (100, 150),  # –ü–∞—É–∑–∞

            # "Of the silence that allows"
            (523, 250),  # C5
            (494, 250),  # B4
            (440, 250),  # A4
            (392, 400),  # G4
            (100, 200),  # –ü–∞—É–∑–∞

            # "For my mind to run around"
            (440, 200),  # A4
            (392, 200),  # G4
            (349, 200),  # F4
            (392, 200),  # G4
            (440, 400),  # A4
            (100, 150),  # –ü–∞—É–∑–∞

            # "With my ear up to the ground"
            (523, 300),  # C5
            (494, 200),  # B4
            (440, 200),  # A4
            (392, 500),  # G4
            (100, 200),  # –ü–∞—É–∑–∞

            # –ü—Ä–∏–ø–µ–≤: "Everybody wants to be my enemy"
            (392, 150),  # G4
            (392, 150),  # G4
            (440, 150),  # A4
            (440, 150),  # A4
            (494, 300),  # B4
            (523, 300),  # C5
            (100, 100),  # –ü–∞—É–∑–∞

            (523, 200),  # C5
            (494, 200),  # B4
            (440, 200),  # A4
            (392, 400),  # G4
            (100, 150),  # –ü–∞—É–∑–∞

            # "Spare the sympathy"
            (349, 200),  # F4
            (392, 200),  # G4
            (440, 300),  # A4
            (494, 500),  # B4
            (100, 200),  # –ü–∞—É–∑–∞

            # "Everybody wants to be"
            (523, 200),  # C5
            (523, 200),  # C5
            (494, 200),  # B4
            (440, 200),  # A4
            (392, 400),  # G4
            (100, 150),  # –ü–∞—É–∑–∞

            # "My enemy-y-y-y-y"
            (587, 250),  # D5
            (523, 250),  # C5
            (494, 250),  # B4
            (440, 250),  # A4
            (392, 600),  # G4
            (100, 200),  # –ü–∞—É–∑–∞

            # –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–∫–∫–æ—Ä–¥
            (392, 800),  # G4
        ]

        try:
            for frequency, duration in melody:
                self._play_beep(frequency, duration)

            logger.info("üéµ –ú–µ–ª–æ–¥–∏—è 'Enemy' –∑–∞–≤–µ—Ä—à–µ–Ω–∞! ‚öîÔ∏è")
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è –º–µ–ª–æ–¥–∏–∏: {e}")
            raise AtolDriverError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å—ã–≥—Ä–∞—Ç—å –º–µ–ª–æ–¥–∏—é: {e}")

    def process_command(self, command_data: Dict[str, Any]) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –∏–∑ pubsub"""
        response = {
            "command_id": command_data.get('command_id'),
            "success": False,
            "message": None,
            "data": None,
        }
        command = command_data.get('command')
        kwargs = command_data.get('kwargs', {})

        try:
            # ======================================================================
            # Connection Commands
            # ======================================================================
            if command == 'connection_open':
                if 'settings' in kwargs and kwargs['settings'] is not None:
                    self.fptr.setSettings(json.dumps(kwargs['settings']))
                self._check_result(self.fptr.open(), "–æ—Ç–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
                response['success'] = True
                response['message'] = "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ö–ö–¢ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"

            elif command == 'connection_close':
                self._check_result(self.fptr.close(), "–∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
                response['success'] = True
                response['message'] = "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ö–ö–¢ –∑–∞–∫—Ä—ã—Ç–æ"

            elif command == 'connection_is_opened':
                is_opened = self.fptr.isOpened()
                response['success'] = True
                response['message'] = "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ" if is_opened else "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
                response['data'] = {
                    'is_opened': is_opened,
                    'message': response['message']
                }

            # ======================================================================
            # Shift Commands
            # ======================================================================
            elif command == 'shift_open':
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_OPERATOR_NAME, kwargs['cashier_name'])
                self._check_result(self.fptr.openShift(), "–æ—Ç–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã")
                shift_number = self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_SHIFT_NUMBER)
                response['success'] = True
                response['message'] = f"–°–º–µ–Ω–∞ #{shift_number} —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞"
                response['data'] = {'shift_number': shift_number}

            elif command == 'shift_close':
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_OPERATOR_NAME, kwargs['cashier_name'])
                self._check_result(self.fptr.closeShift(), "–∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã")
                response['success'] = True
                response['data'] = {
                    "shift_number": self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_SHIFT_NUMBER),
                    "fiscal_document_number": self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_FISCAL_DOCUMENT_NUMBER),
                }
                response['message'] = "–°–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞, Z-–æ—Ç—á–µ—Ç –Ω–∞–ø–µ—á–∞—Ç–∞–Ω"

            # ======================================================================
            # Receipt Commands
            # ======================================================================
            elif command == 'receipt_open':
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_RECEIPT_TYPE, kwargs['receipt_type'])
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_OPERATOR_NAME, kwargs['cashier_name'])
                if kwargs.get('customer_contact'):
                    self.fptr.setParam(IFptr.LIBFPTR_PARAM_RECEIPT_ELECTRONICALLY, True)
                    self.fptr.setParam(IFptr.LIBFPTR_PARAM_BUYER_EMAIL_OR_PHONE, kwargs['customer_contact'])
                self._check_result(self.fptr.openReceipt(), "–æ—Ç–∫—Ä—ã—Ç–∏—è —á–µ–∫–∞")
                response['success'] = True
                response['message'] = f"–ß–µ–∫ —Ç–∏–ø–∞ {kwargs['receipt_type']} —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç"

            elif command == 'receipt_add_item':
                for key, value in kwargs.items():
                    if key == 'name': self.fptr.setParam(IFptr.LIBFPTR_PARAM_COMMODITY_NAME, value)
                    elif key == 'price': self.fptr.setParam(IFptr.LIBFPTR_PARAM_PRICE, value)
                    elif key == 'quantity': self.fptr.setParam(IFptr.LIBFPTR_PARAM_QUANTITY, value)
                    elif key == 'tax_type': self.fptr.setParam(IFptr.LIBFPTR_PARAM_TAX_TYPE, value)
                    elif key == 'payment_method': self.fptr.setParam(IFptr.LIBFPTR_PARAM_PAYMENT_TYPE_SIGN, value)
                    elif key == 'payment_object': self.fptr.setParam(IFptr.LIBFPTR_PARAM_COMMODITY_SIGN, value)
                self._check_result(self.fptr.registration(), "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–∏")
                response['success'] = True
                response['message'] = f"–ü–æ–∑–∏—Ü–∏—è '{kwargs['name']}' –¥–æ–±–∞–≤–ª–µ–Ω–∞"

            elif command == 'receipt_add_payment':
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_PAYMENT_TYPE, kwargs['payment_type'])
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_PAYMENT_SUM, kwargs['amount'])
                self._check_result(self.fptr.payment(), "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–ø–ª–∞—Ç—ã")
                response['success'] = True
                response['message'] = f"–û–ø–ª–∞—Ç–∞ {kwargs['amount']:.2f} –¥–æ–±–∞–≤–ª–µ–Ω–∞"

            elif command == 'receipt_close':
                self._check_result(self.fptr.closeReceipt(), "–∑–∞–∫—Ä—ã—Ç–∏—è —á–µ–∫–∞")
                response['success'] = True
                response['data'] = {
                    "fiscal_document_number": self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_FISCAL_DOCUMENT_NUMBER),
                    "fiscal_document_sign": self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_FISCAL_DOCUMENT_SIGN),
                    "shift_number": self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_SHIFT_NUMBER),
                }
                response['message'] = "–ß–µ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç –∏ –Ω–∞–ø–µ—á–∞—Ç–∞–Ω"

            elif command == 'receipt_cancel':
                self._check_result(self.fptr.cancelReceipt(), "–æ—Ç–º–µ–Ω—ã —á–µ–∫–∞")
                response['success'] = True
                response['message'] = "–ß–µ–∫ –æ—Ç–º–µ–Ω–µ–Ω"

            # ======================================================================
            # Sound Commands
            # ======================================================================
            elif command == 'beep':
                frequency = kwargs.get('frequency', 2000)
                duration = kwargs.get('duration', 100)
                self._play_beep(frequency, duration)
                response['success'] = True
                response['message'] = f"–ó–≤—É–∫–æ–≤–æ–π —Å–∏–≥–Ω–∞–ª –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω (—á–∞—Å—Ç–æ—Ç–∞: {frequency} –ì—Ü, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} –º—Å)"

            elif command == 'play_arcane_melody':
                self._play_arcane_melody()
                response['success'] = True
                response['message'] = "–ú–µ–ª–æ–¥–∏—è 'Enemy' –∏–∑ Arcane —É—Å–ø–µ—à–Ω–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞!"

            # ======================================================================
            # Cash Commands
            # ======================================================================
            elif command == 'cash_income':
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_SUM, kwargs['amount'])
                self._check_result(self.fptr.cashIncome(), "–≤–Ω–µ—Å–µ–Ω–∏—è –Ω–∞–ª–∏—á–Ω—ã—Ö")
                response['success'] = True
                response['message'] = f"–í–Ω–µ—Å–µ–Ω–æ –Ω–∞–ª–∏—á–Ω—ã—Ö: {kwargs['amount']:.2f}"

            elif command == 'cash_outcome':
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_SUM, kwargs['amount'])
                self._check_result(self.fptr.cashOutcome(), "–≤—ã–ø–ª–∞—Ç—ã –Ω–∞–ª–∏—á–Ω—ã—Ö")
                response['success'] = True
                response['message'] = f"–í—ã–ø–ª–∞—á–µ–Ω–æ –Ω–∞–ª–∏—á–Ω—ã—Ö: {kwargs['amount']:.2f}"

            # ======================================================================
            # Print Commands
            # ======================================================================
            elif command == 'print_text':
                text = kwargs.get('text', '')
                # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_TEXT, text)
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_ALIGNMENT, kwargs.get('alignment', IFptr.LIBFPTR_ALIGNMENT_LEFT))
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_TEXT_WRAP, kwargs.get('wrap', IFptr.LIBFPTR_TW_NONE))

                # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                if 'font' in kwargs:
                    self.fptr.setParam(IFptr.LIBFPTR_PARAM_FONT, kwargs['font'])
                if 'double_width' in kwargs:
                    self.fptr.setParam(IFptr.LIBFPTR_PARAM_FONT_DOUBLE_WIDTH, kwargs['double_width'])
                if 'double_height' in kwargs:
                    self.fptr.setParam(IFptr.LIBFPTR_PARAM_FONT_DOUBLE_HEIGHT, kwargs['double_height'])
                if 'linespacing' in kwargs:
                    self.fptr.setParam(IFptr.LIBFPTR_PARAM_LINESPACING, kwargs['linespacing'])
                if 'brightness' in kwargs:
                    self.fptr.setParam(IFptr.LIBFPTR_PARAM_BRIGHTNESS, kwargs['brightness'])
                if 'defer' in kwargs and kwargs['defer'] != 0:
                    self.fptr.setParam(IFptr.LIBFPTR_PARAM_DEFER, kwargs['defer'])

                self._check_result(self.fptr.printText(), "–ø–µ—á–∞—Ç–∏ —Ç–µ–∫—Å—Ç–∞")
                response['success'] = True
                response['message'] = f"–¢–µ–∫—Å—Ç –Ω–∞–ø–µ—á–∞—Ç–∞–Ω: '{text}'"

            elif command == 'print_feed':
                lines = kwargs.get('lines', 1)
                for _ in range(lines):
                    self._check_result(self.fptr.printText(), "–ø—Ä–æ–º–æ—Ç–∫–∏ –ª–µ–Ω—Ç—ã")
                response['success'] = True
                response['message'] = f"–ü—Ä–æ–º–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: {lines}"

            elif command == 'print_barcode':
                barcode = kwargs['barcode']
                # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_BARCODE, barcode)
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_BARCODE_TYPE, kwargs.get('barcode_type', IFptr.LIBFPTR_BT_QR))
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_ALIGNMENT, kwargs.get('alignment', IFptr.LIBFPTR_ALIGNMENT_LEFT))
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_SCALE, kwargs.get('scale', 2))

                # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                if 'left_margin' in kwargs:
                    self.fptr.setParam(IFptr.LIBFPTR_PARAM_LEFT_MARGIN, kwargs['left_margin'])
                if 'invert' in kwargs:
                    self.fptr.setParam(IFptr.LIBFPTR_PARAM_BARCODE_INVERT, kwargs['invert'])
                if 'height' in kwargs:
                    self.fptr.setParam(IFptr.LIBFPTR_PARAM_HEIGHT, kwargs['height'])
                if 'print_text' in kwargs:
                    self.fptr.setParam(IFptr.LIBFPTR_PARAM_BARCODE_PRINT_TEXT, kwargs['print_text'])
                if 'correction' in kwargs:
                    self.fptr.setParam(IFptr.LIBFPTR_PARAM_BARCODE_CORRECTION, kwargs['correction'])
                if 'version' in kwargs:
                    self.fptr.setParam(IFptr.LIBFPTR_PARAM_BARCODE_VERSION, kwargs['version'])
                if 'columns' in kwargs:
                    self.fptr.setParam(IFptr.LIBFPTR_PARAM_BARCODE_COLUMNS, kwargs['columns'])
                if 'defer' in kwargs and kwargs['defer'] != 0:
                    self.fptr.setParam(IFptr.LIBFPTR_PARAM_DEFER, kwargs['defer'])

                self._check_result(self.fptr.printBarcode(), "–ø–µ—á–∞—Ç–∏ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞")
                response['success'] = True
                response['message'] = f"–®—Ç—Ä–∏—Ö–∫–æ–¥ –Ω–∞–ø–µ—á–∞—Ç–∞–Ω: '{barcode}'"

            elif command == 'print_picture':
                filename = kwargs['filename']
                # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_FILENAME, filename)
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_ALIGNMENT, kwargs.get('alignment', IFptr.LIBFPTR_ALIGNMENT_LEFT))
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_SCALE_PERCENT, kwargs.get('scale_percent', 100))

                # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                if 'left_margin' in kwargs:
                    self.fptr.setParam(IFptr.LIBFPTR_PARAM_LEFT_MARGIN, kwargs['left_margin'])

                self._check_result(self.fptr.printPicture(), "–ø–µ—á–∞—Ç–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏")
                response['success'] = True
                response['message'] = f"–ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–∞–ø–µ—á–∞—Ç–∞–Ω–∞: '{filename}'"

            elif command == 'print_picture_by_number':
                picture_number = kwargs['picture_number']
                # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_PICTURE_NUMBER, picture_number)
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_ALIGNMENT, kwargs.get('alignment', IFptr.LIBFPTR_ALIGNMENT_LEFT))

                # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                if 'left_margin' in kwargs:
                    self.fptr.setParam(IFptr.LIBFPTR_PARAM_LEFT_MARGIN, kwargs['left_margin'])
                if 'defer' in kwargs and kwargs['defer'] != 0:
                    self.fptr.setParam(IFptr.LIBFPTR_PARAM_DEFER, kwargs['defer'])

                self._check_result(self.fptr.printPictureByNumber(), "–ø–µ—á–∞—Ç–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–∑ –ø–∞–º—è—Ç–∏")
                response['success'] = True
                response['message'] = f"–ö–∞—Ä—Ç–∏–Ω–∫–∞ ‚Ññ{picture_number} –Ω–∞–ø–µ—á–∞—Ç–∞–Ω–∞"

            elif command == 'open_nonfiscal_document':
                self._check_result(self.fptr.beginNonfiscalDocument(), "–æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–µ—Ñ–∏—Å–∫–∞–ª—å–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
                response['success'] = True
                response['message'] = "–ù–µ—Ñ–∏—Å–∫–∞–ª—å–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç–∫—Ä—ã—Ç"

            elif command == 'close_nonfiscal_document':
                self._check_result(self.fptr.endNonfiscalDocument(), "–∑–∞–∫—Ä—ã—Ç–∏—è –Ω–µ—Ñ–∏—Å–∫–∞–ª—å–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
                response['success'] = True
                response['message'] = "–ù–µ—Ñ–∏—Å–∫–∞–ª—å–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç"

            elif command == 'cut_paper':
                self._check_result(self.fptr.cut(), "–æ—Ç—Ä–µ–∑–∞–Ω–∏—è —á–µ–∫–∞")
                response['success'] = True
                response['message'] = "–ß–µ–∫ –æ—Ç—Ä–µ–∑–∞–Ω"

            elif command == 'open_cash_drawer':
                self._check_result(self.fptr.openCashDrawer(), "–æ—Ç–∫—Ä—ã—Ç–∏—è –¥–µ–Ω–µ–∂–Ω–æ–≥–æ —è—â–∏–∫–∞")
                response['success'] = True
                response['message'] = "–î–µ–Ω–µ–∂–Ω—ã–π —è—â–∏–∫ –æ—Ç–∫—Ä—ã—Ç"

            elif command == 'print_x_report':
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_REPORT_TYPE, IFptr.LIBFPTR_RT_X)
                self._check_result(self.fptr.report(), "–ø–µ—á–∞—Ç–∏ X-–æ—Ç—á–µ—Ç–∞")
                response['success'] = True
                response['message'] = "X-–æ—Ç—á–µ—Ç –Ω–∞–ø–µ—á–∞—Ç–∞–Ω"

            # ======================================================================
            # Query Commands (All of them)
            # ======================================================================
            elif command == 'get_status':
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_DATA_TYPE, IFptr.LIBFPTR_DT_STATUS)
                self._check_result(self.fptr.queryData(), "–∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞")
                response['data'] = {
                    "model_name": self.fptr.getParamString(IFptr.LIBFPTR_PARAM_MODEL_NAME),
                    "serial_number": self.fptr.getParamString(IFptr.LIBFPTR_PARAM_SERIAL_NUMBER),
                    "shift_state": self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_SHIFT_STATE),
                    "cover_opened": self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_COVER_OPENED),
                    "paper_present": self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_RECEIPT_PAPER_PRESENT),
                }
                response['success'] = True

            elif command == 'get_short_status':
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_DATA_TYPE, IFptr.LIBFPTR_DT_SHORT_STATUS)
                self._check_result(self.fptr.queryData(), "–∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞")
                response['data'] = {
                    "cashdrawer_opened": self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_CASHDRAWER_OPENED),
                    "paper_present": self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_RECEIPT_PAPER_PRESENT),
                    "paper_near_end": self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_PAPER_NEAR_END),
                    "cover_opened": self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_COVER_OPENED),
                }
                response['success'] = True

            elif command == 'get_cash_sum':
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_DATA_TYPE, IFptr.LIBFPTR_DT_CASH_SUM)
                self._check_result(self.fptr.queryData(), "–∑–∞–ø—Ä–æ—Å–∞ —Å—É–º–º—ã –Ω–∞–ª–∏—á–Ω—ã—Ö")
                response['data'] = {"cash_sum": self.fptr.getParamDouble(IFptr.LIBFPTR_PARAM_SUM)}
                response['success'] = True

            elif command == 'get_shift_state':
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_DATA_TYPE, IFptr.LIBFPTR_DT_SHIFT_STATE)
                self._check_result(self.fptr.queryData(), "–∑–∞–ø—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–º–µ–Ω—ã")
                dt = self.fptr.getParamDateTime(IFptr.LIBFPTR_PARAM_DATE_TIME)
                response['data'] = {
                    "shift_state": self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_SHIFT_STATE),
                    "shift_number": self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_SHIFT_NUMBER),
                    "date_time": dt.isoformat() if isinstance(dt, datetime.datetime) else None,
                }
                response['success'] = True

            elif command == 'get_receipt_state':
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_DATA_TYPE, IFptr.LIBFPTR_DT_RECEIPT_STATE)
                self._check_result(self.fptr.queryData(), "–∑–∞–ø—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ–∫–∞")
                response['data'] = {
                    "receipt_type": self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_RECEIPT_TYPE),
                    "receipt_sum": self.fptr.getParamDouble(IFptr.LIBFPTR_PARAM_RECEIPT_SUM),
                    "receipt_number": self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_RECEIPT_NUMBER),
                    "document_number": self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_DOCUMENT_NUMBER),
                    "remainder": self.fptr.getParamDouble(IFptr.LIBFPTR_PARAM_REMAINDER),
                    "change": self.fptr.getParamDouble(IFptr.LIBFPTR_PARAM_CHANGE),
                }
                response['success'] = True

            elif command == 'get_datetime':
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_DATA_TYPE, IFptr.LIBFPTR_DT_DATE_TIME)
                self._check_result(self.fptr.queryData(), "–∑–∞–ø—Ä–æ—Å–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏")
                dt = self.fptr.getParamDateTime(IFptr.LIBFPTR_PARAM_DATE_TIME)
                response['data'] = {
                    "date_time": dt.isoformat() if isinstance(dt, datetime.datetime) else None
                }
                response['success'] = True

            elif command == 'get_serial_number':
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_DATA_TYPE, IFptr.LIBFPTR_DT_SERIAL_NUMBER)
                self._check_result(self.fptr.queryData(), "–∑–∞–ø—Ä–æ—Å–∞ –∑–∞–≤–æ–¥—Å–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞")
                response['data'] = {
                    "serial_number": self.fptr.getParamString(IFptr.LIBFPTR_PARAM_SERIAL_NUMBER)
                }
                response['success'] = True

            elif command == 'get_model_info':
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_DATA_TYPE, IFptr.LIBFPTR_DT_MODEL_INFO)
                self._check_result(self.fptr.queryData(), "–∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏")
                response['data'] = {
                    "model": self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_MODEL),
                    "model_name": self.fptr.getParamString(IFptr.LIBFPTR_PARAM_MODEL_NAME),
                    "firmware_version": self.fptr.getParamString(IFptr.LIBFPTR_PARAM_UNIT_VERSION),
                }
                response['success'] = True

            elif command == 'get_receipt_line_length':
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_DATA_TYPE, IFptr.LIBFPTR_DT_RECEIPT_LINE_LENGTH)
                self._check_result(self.fptr.queryData(), "–∑–∞–ø—Ä–æ—Å–∞ —à–∏—Ä–∏–Ω—ã —á–µ–∫–æ–≤–æ–π –ª–µ–Ω—Ç—ã")
                response['data'] = {
                    "char_line_length": self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_RECEIPT_LINE_LENGTH),
                    "pix_line_length": self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_RECEIPT_LINE_LENGTH_PIX),
                }
                response['success'] = True

            elif command == 'get_unit_version':
                unit_type = kwargs.get('unit_type', IFptr.LIBFPTR_UT_FIRMWARE)
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_DATA_TYPE, IFptr.LIBFPTR_DT_UNIT_VERSION)
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_UNIT_TYPE, unit_type)
                self._check_result(self.fptr.queryData(), "–∑–∞–ø—Ä–æ—Å–∞ –≤–µ—Ä—Å–∏–∏ –º–æ–¥—É–ª—è")
                result_data = {
                    "unit_version": self.fptr.getParamString(IFptr.LIBFPTR_PARAM_UNIT_VERSION)
                }
                # –î–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–∞–∫–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤–µ—Ä—Å–∏—è —Ä–µ–ª–∏–∑–∞
                if unit_type == IFptr.LIBFPTR_UT_CONFIGURATION:
                    result_data["release_version"] = self.fptr.getParamString(IFptr.LIBFPTR_PARAM_UNIT_RELEASE_VERSION)
                response['data'] = result_data
                response['success'] = True

            elif command == 'get_payment_sum':
                payment_type = kwargs['payment_type']
                receipt_type = kwargs['receipt_type']
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_DATA_TYPE, IFptr.LIBFPTR_DT_PAYMENT_SUM)
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_PAYMENT_TYPE, payment_type)
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_RECEIPT_TYPE, receipt_type)
                self._check_result(self.fptr.queryData(), "–∑–∞–ø—Ä–æ—Å–∞ —Å—É–º–º—ã –ø–ª–∞—Ç–µ–∂–µ–π")
                response['data'] = {
                    "sum": self.fptr.getParamDouble(IFptr.LIBFPTR_PARAM_SUM)
                }
                response['success'] = True

            elif command == 'get_cashin_sum':
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_DATA_TYPE, IFptr.LIBFPTR_DT_CASHIN_SUM)
                self._check_result(self.fptr.queryData(), "–∑–∞–ø—Ä–æ—Å–∞ —Å—É–º–º—ã –≤–Ω–µ—Å–µ–Ω–∏–π")
                response['data'] = {"sum": self.fptr.getParamDouble(IFptr.LIBFPTR_PARAM_SUM)}
                response['success'] = True

            elif command == 'get_cashout_sum':
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_DATA_TYPE, IFptr.LIBFPTR_DT_CASHOUT_SUM)
                self._check_result(self.fptr.queryData(), "–∑–∞–ø—Ä–æ—Å–∞ —Å—É–º–º—ã –≤—ã–ø–ª–∞—Ç")
                response['data'] = {"sum": self.fptr.getParamDouble(IFptr.LIBFPTR_PARAM_SUM)}
                response['success'] = True

            elif command == 'get_receipt_count':
                receipt_type = kwargs['receipt_type']
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_DATA_TYPE, IFptr.LIBFPTR_DT_RECEIPT_COUNT)
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_RECEIPT_TYPE, receipt_type)
                self._check_result(self.fptr.queryData(), "–∑–∞–ø—Ä–æ—Å–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–µ–∫–æ–≤")
                response['data'] = {
                    "count": self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_DOCUMENTS_COUNT)
                }
                response['success'] = True

            elif command == 'get_non_nullable_sum':
                receipt_type = kwargs['receipt_type']
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_DATA_TYPE, IFptr.LIBFPTR_DT_NON_NULLABLE_SUM)
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_RECEIPT_TYPE, receipt_type)
                self._check_result(self.fptr.queryData(), "–∑–∞–ø—Ä–æ—Å–∞ –Ω–µ–æ–±–Ω—É–ª—è–µ–º–æ–π —Å—É–º–º—ã")
                response['data'] = {
                    "sum": self.fptr.getParamDouble(IFptr.LIBFPTR_PARAM_SUM)
                }
                response['success'] = True

            elif command == 'get_power_source_state':
                power_source_type = kwargs.get('power_source_type', IFptr.LIBFPTR_PST_BATTERY)
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_DATA_TYPE, IFptr.LIBFPTR_DT_POWER_SOURCE_STATE)
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_POWER_SOURCE_TYPE, power_source_type)
                self._check_result(self.fptr.queryData(), "–∑–∞–ø—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø–∏—Ç–∞–Ω–∏—è")
                response['data'] = {
                    "battery_charge": self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_BATTERY_CHARGE),
                    "voltage": self.fptr.getParamDouble(IFptr.LIBFPTR_PARAM_VOLTAGE),
                    "use_battery": self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_USE_BATTERY),
                    "battery_charging": self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_BATTERY_CHARGING),
                    "can_print_while_on_battery": self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_CAN_PRINT_WHILE_ON_BATTERY),
                }
                response['success'] = True

            elif command == 'get_printer_temperature':
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_DATA_TYPE, IFptr.LIBFPTR_DT_PRINTER_TEMPERATURE)
                self._check_result(self.fptr.queryData(), "–∑–∞–ø—Ä–æ—Å–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –¢–ü–ì")
                response['data'] = {
                    "printer_temperature": self.fptr.getParamDouble(IFptr.LIBFPTR_PARAM_PRINTER_TEMPERATURE)
                }
                response['success'] = True

            elif command == 'get_fatal_status':
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_DATA_TYPE, IFptr.LIBFPTR_DT_FATAL_STATUS)
                self._check_result(self.fptr.queryData(), "–∑–∞–ø—Ä–æ—Å–∞ —Ñ–∞—Ç–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫")
                response['data'] = {
                    "no_serial_number": self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_NO_SERIAL_NUMBER),
                    "rtc_fault": self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_RTC_FAULT),
                    "settings_fault": self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_SETTINGS_FAULT),
                    "counters_fault": self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_COUNTERS_FAULT),
                    "user_memory_fault": self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_USER_MEMORY_FAULT),
                    "service_counters_fault": self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_SERVICE_COUNTERS_FAULT),
                    "attributes_fault": self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_ATTRIBUTES_FAULT),
                    "fn_fault": self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_FN_FAULT),
                    "invalid_fn": self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_INVALID_FN),
                    "hard_fault": self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_HARD_FAULT),
                    "memory_manager_fault": self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_MEMORY_MANAGER_FAULT),
                    "scripts_fault": self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_SCRIPTS_FAULT),
                    "wait_for_reboot": self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_WAIT_FOR_REBOOT),
                    "universal_counters_fault": self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_UNIVERSAL_COUNTERS_FAULT),
                    "commodities_table_fault": self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_COMMODITIES_TABLE_FAULT),
                }
                response['success'] = True

            elif command == 'get_mac_address':
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_DATA_TYPE, IFptr.LIBFPTR_DT_MAC_ADDRESS)
                self._check_result(self.fptr.queryData(), "–∑–∞–ø—Ä–æ—Å–∞ MAC-–∞–¥—Ä–µ—Å–∞")
                response['data'] = {
                    "mac_address": self.fptr.getParamString(IFptr.LIBFPTR_PARAM_MAC_ADDRESS)
                }
                response['success'] = True

            elif command == 'get_ethernet_info':
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_DATA_TYPE, IFptr.LIBFPTR_DT_ETHERNET_INFO)
                self._check_result(self.fptr.queryData(), "–∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Ethernet")
                response['data'] = {
                    "ip": self.fptr.getParamString(IFptr.LIBFPTR_PARAM_ETHERNET_IP),
                    "mask": self.fptr.getParamString(IFptr.LIBFPTR_PARAM_ETHERNET_MASK),
                    "gateway": self.fptr.getParamString(IFptr.LIBFPTR_PARAM_ETHERNET_GATEWAY),
                    "dns": self.fptr.getParamString(IFptr.LIBFPTR_PARAM_ETHERNET_DNS_IP),
                    "timeout": self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_ETHERNET_CONFIG_TIMEOUT),
                    "port": self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_ETHERNET_PORT),
                    "dhcp": self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_ETHERNET_DHCP),
                    "dns_static": self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_ETHERNET_DNS_STATIC),
                }
                response['success'] = True

            elif command == 'get_wifi_info':
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_DATA_TYPE, IFptr.LIBFPTR_DT_WIFI_INFO)
                self._check_result(self.fptr.queryData(), "–∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Wi-Fi")
                response['data'] = {
                    "ip": self.fptr.getParamString(IFptr.LIBFPTR_PARAM_WIFI_IP),
                    "mask": self.fptr.getParamString(IFptr.LIBFPTR_PARAM_WIFI_MASK),
                    "gateway": self.fptr.getParamString(IFptr.LIBFPTR_PARAM_WIFI_GATEWAY),
                    "timeout": self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_WIFI_CONFIG_TIMEOUT),
                    "port": self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_WIFI_PORT),
                    "dhcp": self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_WIFI_DHCP),
                }
                response['success'] = True

            # ======================================================================
            # Operator & Document Commands
            # ======================================================================
            elif command == 'operator_login':
                operator_name = kwargs['operator_name']
                operator_vatin = kwargs.get('operator_vatin', '')
                self.fptr.setParam(1021, operator_name)
                if operator_vatin:
                    self.fptr.setParam(1203, operator_vatin)
                self._check_result(self.fptr.operatorLogin(), "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–∞—Å—Å–∏—Ä–∞")
                response['success'] = True
                response['message'] = f"–ö–∞—Å—Å–∏—Ä '{operator_name}' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"

            elif command == 'continue_print':
                self._check_result(self.fptr.continuePrint(), "–¥–æ–ø–µ—á–∞—Ç—ã–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞")
                response['success'] = True
                response['message'] = "–î–æ–∫—É–º–µ–Ω—Ç –¥–æ–ø–µ—á–∞—Ç–∞–Ω"

            elif command == 'check_document_closed':
                self._check_result(self.fptr.checkDocumentClosed(), "–ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞")
                response['data'] = {
                    "document_closed": self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_DOCUMENT_CLOSED),
                    "document_printed": self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_DOCUMENT_PRINTED),
                }
                response['success'] = True
                response['message'] = "–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ"

            # ======================================================================
            # Configuration Commands
            # ======================================================================
            elif command == 'configure_logging':
                # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                from .config.logging_config import LoggingConfig

                config = LoggingConfig()

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–Ω–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                if 'root_level' in kwargs:
                    config.set_root_level(kwargs['root_level'])
                if 'fiscal_printer_level' in kwargs:
                    config.set_category_level('FiscalPrinter', kwargs['fiscal_printer_level'])
                if 'transport_level' in kwargs:
                    config.set_category_level('Transport', kwargs['transport_level'])
                if 'ethernet_over_transport_level' in kwargs:
                    config.set_category_level('EthernetOverTransport', kwargs['ethernet_over_transport_level'])
                if 'device_debug_level' in kwargs:
                    config.set_category_level('DeviceDebug', kwargs['device_debug_level'])
                if 'usb_level' in kwargs:
                    config.set_category_level('USB', kwargs['usb_level'])
                if 'com_level' in kwargs:
                    config.set_category_level('COM', kwargs['com_level'])
                if 'tcp_level' in kwargs:
                    config.set_category_level('TCP', kwargs['tcp_level'])
                if 'bluetooth_level' in kwargs:
                    config.set_category_level('Bluetooth', kwargs['bluetooth_level'])

                # –í–∫–ª—é—á–∏—Ç—å –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
                if kwargs.get('enable_console', False):
                    config.enable_console_logging()

                # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Ö—Ä–∞–Ω–µ–Ω–∏—è
                if 'max_days_keep' in kwargs:
                    config.set_max_days_keep(kwargs['max_days_keep'])

                # –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                config.write_config()

                response['success'] = True
                response['message'] = "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
                response['data'] = {'config_path': config.get_config_path()}

            elif command == 'change_driver_label':
                label = kwargs['label']
                self.driver.change_label(label)
                response['success'] = True
                response['message'] = f"–ú–µ—Ç–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {label}"

            elif command == 'get_default_logging_config':
                from .config.logging_config import LoggingConfig

                config = LoggingConfig()
                default_config = config.get_default_config()

                response['success'] = True
                response['message'] = "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–ª—É—á–µ–Ω–∞"
                response['data'] = default_config

            else:
                response['message'] = f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}"

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã '{command}': {str(e)}"
            logger.error(error_msg)
            response["message"] = error_msg
            if isinstance(e, AtolDriverError):
                response['data'] = e.to_dict()

        return response

class DeviceWorker:
    """–í–æ—Ä–∫–µ—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∏—Å–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""

    def __init__(self, device_id: str, device_config: dict):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–æ—Ä–∫–µ—Ä–∞ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞

        Args:
            device_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            device_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        """
        self.device_id = device_id
        self.device_config = device_config
        self.processor = None  # –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
        self.command_channel = f"command_fr_channel_{device_id}"
        self.response_channel = f"command_fr_channel_{device_id}_response"

        logger.info(f"‚úì –í–æ—Ä–∫–µ—Ä –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ '{device_id}' –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"  - –ö–∞–Ω–∞–ª –∫–æ–º–∞–Ω–¥: {self.command_channel}")
        logger.info(f"  - –ö–∞–Ω–∞–ª –æ—Ç–≤–µ—Ç–æ–≤: {self.response_channel}")

    def _get_processor(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∫–æ–º–∞–Ω–¥ (lazy initialization)"""
        if self.processor is None:
            self.processor = CommandProcessor()
            logger.info(f"[{self.device_id}] –°–æ–∑–¥–∞–Ω –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∫–æ–º–∞–Ω–¥")
        return self.processor

    def process_message(self, r: redis.Redis, message: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞"""
        if message.get('type') == 'message':
            if message.get('data') == 'ping':
                return

            try:
                command_data = json.loads(message.get('data'))
                logger.debug(f"[{self.device_id}] –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {command_data}")

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º lazy initialization –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
                processor = self._get_processor()
                response = processor.process_command(command_data)
                r.publish(self.response_channel, json.dumps(response, ensure_ascii=False))
                logger.debug(f"[{self.device_id}] –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {response}")

            except json.JSONDecodeError as e:
                logger.error(f"[{self.device_id}] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–º–∞–Ω–¥—ã: {e}")
            except Exception as e:
                logger.error(f"[{self.device_id}] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")


def get_device_configs() -> Dict[str, dict]:
    """
    –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è

    –§–æ—Ä–º–∞—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:
    DEVICES=device1,device2,device3
    DEVICE_device1_TYPE=tcp
    DEVICE_device1_HOST=192.168.1.100
    DEVICE_device1_PORT=5555
    """
    import os

    devices = {}
    devices_list = os.getenv('DEVICES', 'default').split(',')

    for device_id in devices_list:
        device_id = device_id.strip()
        prefix = f"DEVICE_{device_id}_"

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        device_config = {
            'connection_type': os.getenv(f"{prefix}TYPE", settings.atol_connection_type),
            'host': os.getenv(f"{prefix}HOST", settings.atol_host),
            'port': int(os.getenv(f"{prefix}PORT", settings.atol_port)),
        }

        devices[device_id] = device_config
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ '{device_id}': {device_config}")

    return devices


def listen_to_redis():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –æ—Ç –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
    r = redis.Redis(host=settings.redis_host, port=settings.redis_port, decode_responses=True)
    pubsub = r.pubsub()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    device_configs = get_device_configs()

    # –°–æ–∑–¥–∞–µ–º –≤–æ—Ä–∫–µ—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    workers = {}
    for device_id, device_config in device_configs.items():
        worker = DeviceWorker(device_id, device_config)
        workers[device_id] = worker
        pubsub.subscribe(worker.command_channel)

    logger.info(f"üéß –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –æ—Ç {len(workers)} —É—Å—Ç—Ä–æ–π—Å—Ç–≤...")

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤
    for message in pubsub.listen():
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–º—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        channel = message.get('channel')
        if channel:
            for device_id, worker in workers.items():
                if channel == worker.command_channel:
                    worker.process_message(r, message)
                    break


if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Multi-Device Redis Queue Worker –¥–ª—è –ê–¢–û–õ –ö–ö–¢")
    listen_to_redis()