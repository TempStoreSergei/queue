import json
import datetime
from typing import Any, Dict
import redis
from driver import AtolDriver, AtolDriverError
from libfptr10 import IFptr
from settings import settings
from logger import logger


class CommandProcessor:
    """–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –∫–æ–º–∞–Ω–¥ –¥–ª—è –ö–ö–¢ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –∏–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏–∏"""

    def __init__(self, redis_client=None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Å –¥—Ä–∞–π–≤–µ—Ä–æ–º –ö–ö–¢"""
        self.driver = AtolDriver()
        self.fptr = self.driver.fptr
        self.redis_client = redis_client

    def _get_cashier(self, device_id: str, kwargs: dict) -> tuple[str, str]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞—Å—Å–∏—Ä–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º:
        1. –ò–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞ (kwargs)
        2. –ò–∑ Redis (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π)
        3. –ò–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (settings)

        Returns:
            tuple[str, str]: (cashier_name, cashier_inn)
        """
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
        if 'cashier_name' in kwargs:
            cashier_name = kwargs.get('cashier_name')
            cashier_inn = kwargs.get('cashier_inn', '')
            if cashier_name:  # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ –Ω–µ –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                return cashier_name, cashier_inn

        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –∏–∑ Redis
        if self.redis_client:
            try:
                cashier_key = f"cashier:{device_id}"
                cashier_data = self.redis_client.hgetall(cashier_key)
                if cashier_data:
                    cashier_name = cashier_data.get(b"cashier_name", b"").decode('utf-8')
                    cashier_inn = cashier_data.get(b"cashier_inn", b"").decode('utf-8')
                    if cashier_name:
                        return cashier_name, cashier_inn
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Å—Å–∏—Ä–∞ –∏–∑ Redis: {e}")

        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        return settings.cashier_name, settings.cashier_inn

    def _check_result(self, result: int, operation: str):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥—Ä–∞–π–≤–µ—Ä–∞"""
        if result < 0:
            error_description = self.fptr.errorDescription()
            error_code = self.fptr.errorCode()
            raise AtolDriverError(f"–û—à–∏–±–∫–∞ {operation}: {error_description}", error_code=error_code)

    def _play_beep(self, frequency: int = 2000, duration: int = 100):
        """
        –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫–æ–≤–æ–π —Å–∏–≥–Ω–∞–ª

        Args:
            frequency: –ß–∞—Å—Ç–æ—Ç–∞ –≤ –ì—Ü
            duration: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º—Å
        """
        self.fptr.setParam(IFptr.LIBFPTR_PARAM_FREQUENCY, frequency)
        self.fptr.setParam(IFptr.LIBFPTR_PARAM_DURATION, duration)
        self._check_result(self.fptr.beep(), "–ø–æ–¥–∞—á–∏ –∑–≤—É–∫–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞")

    def _play_arcane_melody(self):
        """
        –°—ã–≥—Ä–∞—Ç—å –º–µ–ª–æ–¥–∏—é "Enemy" –∏–∑ Arcane (Imagine Dragons feat. JID)

        üéµ I wake up to the sounds of the silence that allows... üéµ
        """
        logger.info("üéµ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–∏–≥—Ä—ã–≤–∞—Ç—å 'Enemy' –∏–∑ Arcane!")

        # –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è –º–µ–ª–æ–¥–∏—è "Enemy" - –≥–ª–∞–≤–Ω–∞—è —Ç–µ–º–∞
        # –§–æ—Ä–º–∞—Ç: (—á–∞—Å—Ç–æ—Ç–∞ –≤ –ì—Ü, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º—Å)
        melody = [
            # "Look out for yourself"
            (392, 200),  # G4
            (392, 200),  # G4
            (440, 300),  # A4
            (392, 200),  # G4
            (100, 150),  # –ü–∞—É–∑–∞

            # "I wake up to the sounds"
            (349, 200),  # F4
            (392, 200),  # G4
            (440, 200),  # A4
            (494, 400),  # B4
            (100, 150),  # –ü–∞—É–∑–∞

            # "Of the silence that allows"
            (523, 250),  # C5
            (494, 250),  # B4
            (440, 250),  # A4
            (392, 400),  # G4
            (100, 200),  # –ü–∞—É–∑–∞

            # "For my mind to run around"
            (440, 200),  # A4
            (392, 200),  # G4
            (349, 200),  # F4
            (392, 200),  # G4
            (440, 400),  # A4
            (100, 150),  # –ü–∞—É–∑–∞

            # "With my ear up to the ground"
            (523, 300),  # C5
            (494, 200),  # B4
            (440, 200),  # A4
            (392, 500),  # G4
            (100, 200),  # –ü–∞—É–∑–∞

            # –ü—Ä–∏–ø–µ–≤: "Everybody wants to be my enemy"
            (392, 150),  # G4
            (392, 150),  # G4
            (440, 150),  # A4
            (440, 150),  # A4
            (494, 300),  # B4
            (523, 300),  # C5
            (100, 100),  # –ü–∞—É–∑–∞

            (523, 200),  # C5
            (494, 200),  # B4
            (440, 200),  # A4
            (392, 400),  # G4
            (100, 150),  # –ü–∞—É–∑–∞

            # "Spare the sympathy"
            (349, 200),  # F4
            (392, 200),  # G4
            (440, 300),  # A4
            (494, 500),  # B4
            (100, 200),  # –ü–∞—É–∑–∞

            # "Everybody wants to be"
            (523, 200),  # C5
            (523, 200),  # C5
            (494, 200),  # B4
            (440, 200),  # A4
            (392, 400),  # G4
            (100, 150),  # –ü–∞—É–∑–∞

            # "My enemy-y-y-y-y"
            (587, 250),  # D5
            (523, 250),  # C5
            (494, 250),  # B4
            (440, 250),  # A4
            (392, 600),  # G4
            (100, 200),  # –ü–∞—É–∑–∞

            # –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–∫–∫–æ—Ä–¥
            (392, 800),  # G4
        ]

        try:
            for frequency, duration in melody:
                self._play_beep(frequency, duration)

            logger.info("üéµ –ú–µ–ª–æ–¥–∏—è 'Enemy' –∑–∞–≤–µ—Ä—à–µ–Ω–∞! ‚öîÔ∏è")
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è –º–µ–ª–æ–¥–∏–∏: {e}")
            raise AtolDriverError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å—ã–≥—Ä–∞—Ç—å –º–µ–ª–æ–¥–∏—é: {e}")

    def process_command(self, command_data: Dict[str, Any]) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –∏–∑ pubsub"""
        response = {
            "command_id": command_data.get('command_id'),
            "success": False,
            "message": None,
            "data": None,
        }
        command = command_data.get('command')
        kwargs = command_data.get('kwargs', {})
        device_id = command_data.get('device_id', 'default')

        try:
            # ======================================================================
            # Connection Commands
            # ======================================================================
            if command == 'connection_open':
                if 'settings' in kwargs and kwargs['settings'] is not None:
                    self.fptr.setSettings(json.dumps(kwargs['settings']))
                self._check_result(self.fptr.open(), "–æ—Ç–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
                response['success'] = True
                response['message'] = "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ö–ö–¢ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"

            elif command == 'connection_close':
                self._check_result(self.fptr.close(), "–∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
                response['success'] = True
                response['message'] = "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ö–ö–¢ –∑–∞–∫—Ä—ã—Ç–æ"

            elif command == 'connection_is_opened':
                is_opened = self.fptr.isOpened()
                response['success'] = True
                response['message'] = "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ" if is_opened else "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
                response['data'] = {
                    'is_opened': is_opened,
                    'message': response['message']
                }

            # ======================================================================
            # Shift Commands
            # ======================================================================
            elif command == 'shift_open':
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Å—Å–∏—Ä–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º: kwargs -> Redis -> settings
                cashier_name, cashier_inn = self._get_cashier(device_id, kwargs)
                self.fptr.setParam(1021, cashier_name)
                if cashier_inn:
                    self.fptr.setParam(1203, cashier_inn)
                self._check_result(self.fptr.operatorLogin(), "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–∞—Å—Å–∏—Ä–∞")

                # –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã
                self._check_result(self.fptr.openShift(), "–æ—Ç–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã")
                self._check_result(self.fptr.checkDocumentClosed(), "–ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞")

                shift_number = self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_SHIFT_NUMBER)
                response['success'] = True
                response['message'] = f"–°–º–µ–Ω–∞ #{shift_number} —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞"
                response['data'] = {'shift_number': shift_number}

            elif command == 'shift_close':
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Å—Å–∏—Ä–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º: kwargs -> Redis -> settings
                cashier_name, cashier_inn = self._get_cashier(device_id, kwargs)
                self.fptr.setParam(1021, cashier_name)
                if cashier_inn:
                    self.fptr.setParam(1203, cashier_inn)
                self._check_result(self.fptr.operatorLogin(), "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–∞—Å—Å–∏—Ä–∞")

                # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã —á–µ—Ä–µ–∑ report()
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_REPORT_TYPE, IFptr.LIBFPTR_RT_CLOSE_SHIFT)
                self._check_result(self.fptr.report(), "–∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã")
                self._check_result(self.fptr.checkDocumentClosed(), "–ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞")

                response['success'] = True
                response['data'] = {
                    "shift_number": self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_SHIFT_NUMBER),
                    "fiscal_document_number": self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_FISCAL_DOCUMENT_NUMBER),
                }
                response['message'] = "–°–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞, Z-–æ—Ç—á–µ—Ç –Ω–∞–ø–µ—á–∞—Ç–∞–Ω"

            elif command == 'shift_get_status':
                # –ó–∞–ø—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–º–µ–Ω—ã
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_DATA_TYPE, IFptr.LIBFPTR_DT_SHIFT_STATE)
                self._check_result(self.fptr.queryData(), "–∑–∞–ø—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–º–µ–Ω—ã")
                dt = self.fptr.getParamDateTime(IFptr.LIBFPTR_PARAM_DATE_TIME)
                shift_state = self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_SHIFT_STATE)
                shift_number = self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_SHIFT_NUMBER)

                # –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–º–µ–Ω—ã
                shift_state_names = {
                    0: "–°–º–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∞",
                    1: "–°–º–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞",
                    2: "–°–º–µ–Ω–∞ –∏—Å—Ç–µ–∫–ª–∞ (–±–æ–ª—å—à–µ 24 —á–∞—Å–æ–≤)"
                }

                response['success'] = True
                response['data'] = {
                    "shift_state": shift_state,
                    "shift_state_name": shift_state_names.get(shift_state, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ({shift_state})"),
                    "shift_number": shift_number,
                    "date_time": dt.isoformat() if isinstance(dt, datetime.datetime) else None,
                }
                response['message'] = "–°—Ç–∞—Ç—É—Å —Å–º–µ–Ω—ã –ø–æ–ª—É—á–µ–Ω"

            elif command == 'shift_print_x_report':
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Å—Å–∏—Ä–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º: kwargs -> Redis -> settings
                cashier_name, cashier_inn = self._get_cashier(device_id, kwargs)
                self.fptr.setParam(1021, cashier_name)
                if cashier_inn:
                    self.fptr.setParam(1203, cashier_inn)
                self._check_result(self.fptr.operatorLogin(), "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–∞—Å—Å–∏—Ä–∞")

                # –ü–µ—á–∞—Ç—å X-–æ—Ç—á–µ—Ç–∞
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_REPORT_TYPE, IFptr.LIBFPTR_RT_X)
                self._check_result(self.fptr.report(), "–ø–µ—á–∞—Ç–∏ X-–æ—Ç—á–µ—Ç–∞")

                response['success'] = True
                response['message'] = "X-–æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –Ω–∞–ø–µ—á–∞—Ç–∞–Ω"

            # ======================================================================
            # Receipt Commands
            # ======================================================================
            elif command == 'receipt_open':
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Å—Å–∏—Ä–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º: kwargs -> Redis -> settings
                cashier_name, cashier_inn = self._get_cashier(device_id, kwargs)
                self.fptr.setParam(1021, cashier_name)
                if cashier_inn:
                    self.fptr.setParam(1203, cashier_inn)
                self._check_result(self.fptr.operatorLogin(), "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–∞—Å—Å–∏—Ä–∞")

                # –û—Ç–∫—Ä—ã—Ç–∏–µ —á–µ–∫–∞
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_RECEIPT_TYPE, kwargs['receipt_type'])
                if kwargs.get('customer_contact'):
                    self.fptr.setParam(IFptr.LIBFPTR_PARAM_RECEIPT_ELECTRONICALLY, True)
                    self.fptr.setParam(IFptr.LIBFPTR_PARAM_BUYER_EMAIL_OR_PHONE, kwargs['customer_contact'])
                self._check_result(self.fptr.openReceipt(), "–æ—Ç–∫—Ä—ã—Ç–∏—è —á–µ–∫–∞")
                response['success'] = True
                response['message'] = f"–ß–µ–∫ —Ç–∏–ø–∞ {kwargs['receipt_type']} —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç"

            elif command == 'registration':
                for key, value in kwargs.items():
                    if key == 'name': self.fptr.setParam(IFptr.LIBFPTR_PARAM_COMMODITY_NAME, value)
                    elif key == 'price': self.fptr.setParam(IFptr.LIBFPTR_PARAM_PRICE, value)
                    elif key == 'quantity': self.fptr.setParam(IFptr.LIBFPTR_PARAM_QUANTITY, value)
                    elif key == 'tax_type': self.fptr.setParam(IFptr.LIBFPTR_PARAM_TAX_TYPE, value)
                    elif key == 'payment_method': self.fptr.setParam(IFptr.LIBFPTR_PARAM_PAYMENT_TYPE_SIGN, value)
                    elif key == 'payment_object': self.fptr.setParam(IFptr.LIBFPTR_PARAM_COMMODITY_SIGN, value)
                self._check_result(self.fptr.registration(), "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–∏")
                response['success'] = True
                response['message'] = f"–ü–æ–∑–∏—Ü–∏—è '{kwargs['name']}' –¥–æ–±–∞–≤–ª–µ–Ω–∞"

            elif command == 'payment':
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_PAYMENT_TYPE, kwargs['payment_type'])
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_PAYMENT_SUM, kwargs['sum'])
                self._check_result(self.fptr.payment(), "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–ø–ª–∞—Ç—ã")
                response['success'] = True
                response['message'] = f"–û–ø–ª–∞—Ç–∞ {kwargs['sum']:.2f} –¥–æ–±–∞–≤–ª–µ–Ω–∞"

            elif command == 'receipt_close':
                self._check_result(self.fptr.closeReceipt(), "–∑–∞–∫—Ä—ã—Ç–∏—è —á–µ–∫–∞")
                response['success'] = True
                response['data'] = None
                response['message'] = "–ß–µ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç –∏ –Ω–∞–ø–µ—á–∞—Ç–∞–Ω"

            elif command == 'receipt_cancel':
                self._check_result(self.fptr.cancelReceipt(), "–æ—Ç–º–µ–Ω—ã —á–µ–∫–∞")
                response['success'] = True
                response['message'] = "–ß–µ–∫ –æ—Ç–º–µ–Ω–µ–Ω"

            # ======================================================================
            # Sound Commands
            # ======================================================================
            elif command == 'beep':
                frequency = kwargs.get('frequency', 2000)
                duration = kwargs.get('duration', 100)
                self._play_beep(frequency, duration)
                response['success'] = True
                response['message'] = f"–ó–≤—É–∫–æ–≤–æ–π —Å–∏–≥–Ω–∞–ª –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω (—á–∞—Å—Ç–æ—Ç–∞: {frequency} –ì—Ü, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} –º—Å)"

            elif command == 'play_arcane_melody':
                self._play_arcane_melody()
                response['success'] = True
                response['message'] = "–ú–µ–ª–æ–¥–∏—è 'Enemy' –∏–∑ Arcane —É—Å–ø–µ—à–Ω–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞!"

            # ======================================================================
            # Cash Commands
            # ======================================================================
            elif command == 'cash_income':
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_SUM, kwargs['amount'])
                self._check_result(self.fptr.cashIncome(), "–≤–Ω–µ—Å–µ–Ω–∏—è –Ω–∞–ª–∏—á–Ω—ã—Ö")
                response['success'] = True
                response['message'] = f"–í–Ω–µ—Å–µ–Ω–æ –Ω–∞–ª–∏—á–Ω—ã—Ö: {kwargs['amount']:.2f}"

            elif command == 'cash_outcome':
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_SUM, kwargs['amount'])
                self._check_result(self.fptr.cashOutcome(), "–≤—ã–ø–ª–∞—Ç—ã –Ω–∞–ª–∏—á–Ω—ã—Ö")
                response['success'] = True
                response['message'] = f"–í—ã–ø–ª–∞—á–µ–Ω–æ –Ω–∞–ª–∏—á–Ω—ã—Ö: {kwargs['amount']:.2f}"

            # ======================================================================
            # Print Commands
            # ======================================================================
            elif command == 'print_text':
                text = kwargs.get('text', '')
                # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_TEXT, text)
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_ALIGNMENT, kwargs.get('alignment', IFptr.LIBFPTR_ALIGNMENT_LEFT))
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_TEXT_WRAP, kwargs.get('wrap', IFptr.LIBFPTR_TW_NONE))

                # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                if 'font' in kwargs:
                    self.fptr.setParam(IFptr.LIBFPTR_PARAM_FONT, kwargs['font'])
                if 'double_width' in kwargs:
                    self.fptr.setParam(IFptr.LIBFPTR_PARAM_FONT_DOUBLE_WIDTH, kwargs['double_width'])
                if 'double_height' in kwargs:
                    self.fptr.setParam(IFptr.LIBFPTR_PARAM_FONT_DOUBLE_HEIGHT, kwargs['double_height'])
                if 'linespacing' in kwargs:
                    self.fptr.setParam(IFptr.LIBFPTR_PARAM_LINESPACING, kwargs['linespacing'])
                if 'brightness' in kwargs:
                    self.fptr.setParam(IFptr.LIBFPTR_PARAM_BRIGHTNESS, kwargs['brightness'])
                if 'defer' in kwargs and kwargs['defer'] != 0:
                    self.fptr.setParam(IFptr.LIBFPTR_PARAM_DEFER, kwargs['defer'])

                self._check_result(self.fptr.printText(), "–ø–µ—á–∞—Ç–∏ —Ç–µ–∫—Å—Ç–∞")
                response['success'] = True
                response['message'] = f"–¢–µ–∫—Å—Ç –Ω–∞–ø–µ—á–∞—Ç–∞–Ω: '{text}'"

            elif command == 'print_feed':
                lines = kwargs.get('lines', 1)
                for _ in range(lines):
                    self._check_result(self.fptr.printText(), "–ø—Ä–æ–º–æ—Ç–∫–∏ –ª–µ–Ω—Ç—ã")
                response['success'] = True
                response['message'] = f"–ü—Ä–æ–º–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: {lines}"

            elif command == 'print_barcode':
                barcode = kwargs['barcode']
                # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_BARCODE, barcode)
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_BARCODE_TYPE, kwargs.get('barcode_type', IFptr.LIBFPTR_BT_QR))
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_ALIGNMENT, kwargs.get('alignment', IFptr.LIBFPTR_ALIGNMENT_LEFT))
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_SCALE, kwargs.get('scale', 2))

                # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                if 'left_margin' in kwargs:
                    self.fptr.setParam(IFptr.LIBFPTR_PARAM_LEFT_MARGIN, kwargs['left_margin'])
                if 'invert' in kwargs:
                    self.fptr.setParam(IFptr.LIBFPTR_PARAM_BARCODE_INVERT, kwargs['invert'])
                if 'height' in kwargs:
                    self.fptr.setParam(IFptr.LIBFPTR_PARAM_HEIGHT, kwargs['height'])
                if 'print_text' in kwargs:
                    self.fptr.setParam(IFptr.LIBFPTR_PARAM_BARCODE_PRINT_TEXT, kwargs['print_text'])
                if 'correction' in kwargs:
                    self.fptr.setParam(IFptr.LIBFPTR_PARAM_BARCODE_CORRECTION, kwargs['correction'])
                if 'version' in kwargs:
                    self.fptr.setParam(IFptr.LIBFPTR_PARAM_BARCODE_VERSION, kwargs['version'])
                if 'columns' in kwargs:
                    self.fptr.setParam(IFptr.LIBFPTR_PARAM_BARCODE_COLUMNS, kwargs['columns'])
                if 'defer' in kwargs and kwargs['defer'] != 0:
                    self.fptr.setParam(IFptr.LIBFPTR_PARAM_DEFER, kwargs['defer'])

                self._check_result(self.fptr.printBarcode(), "–ø–µ—á–∞—Ç–∏ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞")
                response['success'] = True
                response['message'] = f"–®—Ç—Ä–∏—Ö–∫–æ–¥ –Ω–∞–ø–µ—á–∞—Ç–∞–Ω: '{barcode}'"

            elif command == 'print_picture':
                filename = kwargs['filename']
                # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_FILENAME, filename)
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_ALIGNMENT, kwargs.get('alignment', IFptr.LIBFPTR_ALIGNMENT_LEFT))
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_SCALE_PERCENT, kwargs.get('scale_percent', 100))

                # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                if 'left_margin' in kwargs:
                    self.fptr.setParam(IFptr.LIBFPTR_PARAM_LEFT_MARGIN, kwargs['left_margin'])

                self._check_result(self.fptr.printPicture(), "–ø–µ—á–∞—Ç–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏")
                response['success'] = True
                response['message'] = f"–ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–∞–ø–µ—á–∞—Ç–∞–Ω–∞: '{filename}'"

            elif command == 'print_picture_by_number':
                picture_number = kwargs['picture_number']
                # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_PICTURE_NUMBER, picture_number)
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_ALIGNMENT, kwargs.get('alignment', IFptr.LIBFPTR_ALIGNMENT_LEFT))

                # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                if 'left_margin' in kwargs:
                    self.fptr.setParam(IFptr.LIBFPTR_PARAM_LEFT_MARGIN, kwargs['left_margin'])
                if 'defer' in kwargs and kwargs['defer'] != 0:
                    self.fptr.setParam(IFptr.LIBFPTR_PARAM_DEFER, kwargs['defer'])

                self._check_result(self.fptr.printPictureByNumber(), "–ø–µ—á–∞—Ç–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–∑ –ø–∞–º—è—Ç–∏")
                response['success'] = True
                response['message'] = f"–ö–∞—Ä—Ç–∏–Ω–∫–∞ ‚Ññ{picture_number} –Ω–∞–ø–µ—á–∞—Ç–∞–Ω–∞"

            elif command == 'open_nonfiscal_document':
                self._check_result(self.fptr.beginNonfiscalDocument(), "–æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–µ—Ñ–∏—Å–∫–∞–ª—å–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
                response['success'] = True
                response['message'] = "–ù–µ—Ñ–∏—Å–∫–∞–ª—å–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç–∫—Ä—ã—Ç"

            elif command == 'close_nonfiscal_document':
                self._check_result(self.fptr.endNonfiscalDocument(), "–∑–∞–∫—Ä—ã—Ç–∏—è –Ω–µ—Ñ–∏—Å–∫–∞–ª—å–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
                response['success'] = True
                response['message'] = "–ù–µ—Ñ–∏—Å–∫–∞–ª—å–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç"

            elif command == 'cut_paper':
                self._check_result(self.fptr.cut(), "–æ—Ç—Ä–µ–∑–∞–Ω–∏—è —á–µ–∫–∞")
                response['success'] = True
                response['message'] = "–ß–µ–∫ –æ—Ç—Ä–µ–∑–∞–Ω"

            elif command == 'open_cash_drawer':
                self._check_result(self.fptr.openCashDrawer(), "–æ—Ç–∫—Ä—ã—Ç–∏—è –¥–µ–Ω–µ–∂–Ω–æ–≥–æ —è—â–∏–∫–∞")
                response['success'] = True
                response['message'] = "–î–µ–Ω–µ–∂–Ω—ã–π —è—â–∏–∫ –æ—Ç–∫—Ä—ã—Ç"

            elif command == 'print_x_report':
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_REPORT_TYPE, IFptr.LIBFPTR_RT_X)
                self._check_result(self.fptr.report(), "–ø–µ—á–∞—Ç–∏ X-–æ—Ç—á–µ—Ç–∞")
                response['success'] = True
                response['message'] = "X-–æ—Ç—á–µ—Ç –Ω–∞–ø–µ—á–∞—Ç–∞–Ω"

            # ======================================================================
            # Query Commands (All of them)
            # ======================================================================
            elif command == 'get_status':
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_DATA_TYPE, IFptr.LIBFPTR_DT_STATUS)
                self._check_result(self.fptr.queryData(), "–∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞")
                response['data'] = {
                    "model_name": self.fptr.getParamString(IFptr.LIBFPTR_PARAM_MODEL_NAME),
                    "serial_number": self.fptr.getParamString(IFptr.LIBFPTR_PARAM_SERIAL_NUMBER),
                    "shift_state": self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_SHIFT_STATE),
                    "cover_opened": self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_COVER_OPENED),
                    "paper_present": self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_RECEIPT_PAPER_PRESENT),
                }
                response['success'] = True

            elif command == 'get_short_status':
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_DATA_TYPE, IFptr.LIBFPTR_DT_SHORT_STATUS)
                self._check_result(self.fptr.queryData(), "–∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞")
                response['data'] = {
                    "cashdrawer_opened": self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_CASHDRAWER_OPENED),
                    "paper_present": self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_RECEIPT_PAPER_PRESENT),
                    "paper_near_end": self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_PAPER_NEAR_END),
                    "cover_opened": self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_COVER_OPENED),
                }
                response['success'] = True

            elif command == 'get_cash_sum':
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_DATA_TYPE, IFptr.LIBFPTR_DT_CASH_SUM)
                self._check_result(self.fptr.queryData(), "–∑–∞–ø—Ä–æ—Å–∞ —Å—É–º–º—ã –Ω–∞–ª–∏—á–Ω—ã—Ö")
                response['data'] = {"cash_sum": self.fptr.getParamDouble(IFptr.LIBFPTR_PARAM_SUM)}
                response['success'] = True

            elif command == 'get_shift_state':
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_DATA_TYPE, IFptr.LIBFPTR_DT_SHIFT_STATE)
                self._check_result(self.fptr.queryData(), "–∑–∞–ø—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–º–µ–Ω—ã")
                dt = self.fptr.getParamDateTime(IFptr.LIBFPTR_PARAM_DATE_TIME)
                response['data'] = {
                    "shift_state": self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_SHIFT_STATE),
                    "shift_number": self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_SHIFT_NUMBER),
                    "date_time": dt.isoformat() if isinstance(dt, datetime.datetime) else None,
                }
                response['success'] = True

            elif command == 'get_receipt_state':
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_DATA_TYPE, IFptr.LIBFPTR_DT_RECEIPT_STATE)
                self._check_result(self.fptr.queryData(), "–∑–∞–ø—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ–∫–∞")
                response['data'] = {
                    "receipt_type": self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_RECEIPT_TYPE),
                    "receipt_sum": self.fptr.getParamDouble(IFptr.LIBFPTR_PARAM_RECEIPT_SUM),
                    "receipt_number": self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_RECEIPT_NUMBER),
                    "document_number": self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_DOCUMENT_NUMBER),
                    "remainder": self.fptr.getParamDouble(IFptr.LIBFPTR_PARAM_REMAINDER),
                    "change": self.fptr.getParamDouble(IFptr.LIBFPTR_PARAM_CHANGE),
                }
                response['success'] = True

            elif command == 'get_datetime':
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_DATA_TYPE, IFptr.LIBFPTR_DT_DATE_TIME)
                self._check_result(self.fptr.queryData(), "–∑–∞–ø—Ä–æ—Å–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏")
                dt = self.fptr.getParamDateTime(IFptr.LIBFPTR_PARAM_DATE_TIME)
                response['data'] = {
                    "date_time": dt.isoformat() if isinstance(dt, datetime.datetime) else None
                }
                response['success'] = True

            elif command == 'get_serial_number':
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_DATA_TYPE, IFptr.LIBFPTR_DT_SERIAL_NUMBER)
                self._check_result(self.fptr.queryData(), "–∑–∞–ø—Ä–æ—Å–∞ –∑–∞–≤–æ–¥—Å–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞")
                response['data'] = {
                    "serial_number": self.fptr.getParamString(IFptr.LIBFPTR_PARAM_SERIAL_NUMBER)
                }
                response['success'] = True

            elif command == 'get_model_info':
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_DATA_TYPE, IFptr.LIBFPTR_DT_MODEL_INFO)
                self._check_result(self.fptr.queryData(), "–∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏")
                response['data'] = {
                    "model": self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_MODEL),
                    "model_name": self.fptr.getParamString(IFptr.LIBFPTR_PARAM_MODEL_NAME),
                    "firmware_version": self.fptr.getParamString(IFptr.LIBFPTR_PARAM_UNIT_VERSION),
                }
                response['success'] = True

            elif command == 'get_receipt_line_length':
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_DATA_TYPE, IFptr.LIBFPTR_DT_RECEIPT_LINE_LENGTH)
                self._check_result(self.fptr.queryData(), "–∑–∞–ø—Ä–æ—Å–∞ —à–∏—Ä–∏–Ω—ã —á–µ–∫–æ–≤–æ–π –ª–µ–Ω—Ç—ã")
                response['data'] = {
                    "char_line_length": self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_RECEIPT_LINE_LENGTH),
                    "pix_line_length": self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_RECEIPT_LINE_LENGTH_PIX),
                }
                response['success'] = True

            elif command == 'get_unit_version':
                unit_type = kwargs.get('unit_type', IFptr.LIBFPTR_UT_FIRMWARE)
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_DATA_TYPE, IFptr.LIBFPTR_DT_UNIT_VERSION)
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_UNIT_TYPE, unit_type)
                self._check_result(self.fptr.queryData(), "–∑–∞–ø—Ä–æ—Å–∞ –≤–µ—Ä—Å–∏–∏ –º–æ–¥—É–ª—è")
                result_data = {
                    "unit_version": self.fptr.getParamString(IFptr.LIBFPTR_PARAM_UNIT_VERSION)
                }
                # –î–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–∞–∫–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤–µ—Ä—Å–∏—è —Ä–µ–ª–∏–∑–∞
                if unit_type == IFptr.LIBFPTR_UT_CONFIGURATION:
                    result_data["release_version"] = self.fptr.getParamString(IFptr.LIBFPTR_PARAM_UNIT_RELEASE_VERSION)
                response['data'] = result_data
                response['success'] = True

            elif command == 'get_payment_sum':
                payment_type = kwargs['payment_type']
                receipt_type = kwargs['receipt_type']
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_DATA_TYPE, IFptr.LIBFPTR_DT_PAYMENT_SUM)
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_PAYMENT_TYPE, payment_type)
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_RECEIPT_TYPE, receipt_type)
                self._check_result(self.fptr.queryData(), "–∑–∞–ø—Ä–æ—Å–∞ —Å—É–º–º—ã –ø–ª–∞—Ç–µ–∂–µ–π")
                response['data'] = {
                    "sum": self.fptr.getParamDouble(IFptr.LIBFPTR_PARAM_SUM)
                }
                response['success'] = True

            elif command == 'get_cashin_sum':
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_DATA_TYPE, IFptr.LIBFPTR_DT_CASHIN_SUM)
                self._check_result(self.fptr.queryData(), "–∑–∞–ø—Ä–æ—Å–∞ —Å—É–º–º—ã –≤–Ω–µ—Å–µ–Ω–∏–π")
                response['data'] = {"sum": self.fptr.getParamDouble(IFptr.LIBFPTR_PARAM_SUM)}
                response['success'] = True

            elif command == 'get_cashout_sum':
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_DATA_TYPE, IFptr.LIBFPTR_DT_CASHOUT_SUM)
                self._check_result(self.fptr.queryData(), "–∑–∞–ø—Ä–æ—Å–∞ —Å—É–º–º—ã –≤—ã–ø–ª–∞—Ç")
                response['data'] = {"sum": self.fptr.getParamDouble(IFptr.LIBFPTR_PARAM_SUM)}
                response['success'] = True

            elif command == 'get_receipt_count':
                receipt_type = kwargs['receipt_type']
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_DATA_TYPE, IFptr.LIBFPTR_DT_RECEIPT_COUNT)
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_RECEIPT_TYPE, receipt_type)
                self._check_result(self.fptr.queryData(), "–∑–∞–ø—Ä–æ—Å–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–µ–∫–æ–≤")
                response['data'] = {
                    "count": self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_DOCUMENTS_COUNT)
                }
                response['success'] = True

            elif command == 'get_non_nullable_sum':
                receipt_type = kwargs['receipt_type']
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_DATA_TYPE, IFptr.LIBFPTR_DT_NON_NULLABLE_SUM)
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_RECEIPT_TYPE, receipt_type)
                self._check_result(self.fptr.queryData(), "–∑–∞–ø—Ä–æ—Å–∞ –Ω–µ–æ–±–Ω—É–ª—è–µ–º–æ–π —Å—É–º–º—ã")
                response['data'] = {
                    "sum": self.fptr.getParamDouble(IFptr.LIBFPTR_PARAM_SUM)
                }
                response['success'] = True

            elif command == 'get_power_source_state':
                power_source_type = kwargs.get('power_source_type', IFptr.LIBFPTR_PST_BATTERY)
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_DATA_TYPE, IFptr.LIBFPTR_DT_POWER_SOURCE_STATE)
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_POWER_SOURCE_TYPE, power_source_type)
                self._check_result(self.fptr.queryData(), "–∑–∞–ø—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø–∏—Ç–∞–Ω–∏—è")
                response['data'] = {
                    "battery_charge": self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_BATTERY_CHARGE),
                    "voltage": self.fptr.getParamDouble(IFptr.LIBFPTR_PARAM_VOLTAGE),
                    "use_battery": self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_USE_BATTERY),
                    "battery_charging": self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_BATTERY_CHARGING),
                    "can_print_while_on_battery": self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_CAN_PRINT_WHILE_ON_BATTERY),
                }
                response['success'] = True

            elif command == 'get_printer_temperature':
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_DATA_TYPE, IFptr.LIBFPTR_DT_PRINTER_TEMPERATURE)
                self._check_result(self.fptr.queryData(), "–∑–∞–ø—Ä–æ—Å–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –¢–ü–ì")
                response['data'] = {
                    "printer_temperature": self.fptr.getParamDouble(IFptr.LIBFPTR_PARAM_PRINTER_TEMPERATURE)
                }
                response['success'] = True

            elif command == 'get_fatal_status':
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_DATA_TYPE, IFptr.LIBFPTR_DT_FATAL_STATUS)
                self._check_result(self.fptr.queryData(), "–∑–∞–ø—Ä–æ—Å–∞ —Ñ–∞—Ç–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫")
                response['data'] = {
                    "no_serial_number": self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_NO_SERIAL_NUMBER),
                    "rtc_fault": self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_RTC_FAULT),
                    "settings_fault": self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_SETTINGS_FAULT),
                    "counters_fault": self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_COUNTERS_FAULT),
                    "user_memory_fault": self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_USER_MEMORY_FAULT),
                    "service_counters_fault": self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_SERVICE_COUNTERS_FAULT),
                    "attributes_fault": self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_ATTRIBUTES_FAULT),
                    "fn_fault": self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_FN_FAULT),
                    "invalid_fn": self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_INVALID_FN),
                    "hard_fault": self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_HARD_FAULT),
                    "memory_manager_fault": self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_MEMORY_MANAGER_FAULT),
                    "scripts_fault": self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_SCRIPTS_FAULT),
                    "wait_for_reboot": self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_WAIT_FOR_REBOOT),
                    "universal_counters_fault": self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_UNIVERSAL_COUNTERS_FAULT),
                    "commodities_table_fault": self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_COMMODITIES_TABLE_FAULT),
                }
                response['success'] = True

            elif command == 'get_mac_address':
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_DATA_TYPE, IFptr.LIBFPTR_DT_MAC_ADDRESS)
                self._check_result(self.fptr.queryData(), "–∑–∞–ø—Ä–æ—Å–∞ MAC-–∞–¥—Ä–µ—Å–∞")
                response['data'] = {
                    "mac_address": self.fptr.getParamString(IFptr.LIBFPTR_PARAM_MAC_ADDRESS)
                }
                response['success'] = True

            elif command == 'get_ethernet_info':
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_DATA_TYPE, IFptr.LIBFPTR_DT_ETHERNET_INFO)
                self._check_result(self.fptr.queryData(), "–∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Ethernet")
                response['data'] = {
                    "ip": self.fptr.getParamString(IFptr.LIBFPTR_PARAM_ETHERNET_IP),
                    "mask": self.fptr.getParamString(IFptr.LIBFPTR_PARAM_ETHERNET_MASK),
                    "gateway": self.fptr.getParamString(IFptr.LIBFPTR_PARAM_ETHERNET_GATEWAY),
                    "dns": self.fptr.getParamString(IFptr.LIBFPTR_PARAM_ETHERNET_DNS_IP),
                    "timeout": self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_ETHERNET_CONFIG_TIMEOUT),
                    "port": self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_ETHERNET_PORT),
                    "dhcp": self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_ETHERNET_DHCP),
                    "dns_static": self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_ETHERNET_DNS_STATIC),
                }
                response['success'] = True

            elif command == 'get_wifi_info':
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_DATA_TYPE, IFptr.LIBFPTR_DT_WIFI_INFO)
                self._check_result(self.fptr.queryData(), "–∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Wi-Fi")
                response['data'] = {
                    "ip": self.fptr.getParamString(IFptr.LIBFPTR_PARAM_WIFI_IP),
                    "mask": self.fptr.getParamString(IFptr.LIBFPTR_PARAM_WIFI_MASK),
                    "gateway": self.fptr.getParamString(IFptr.LIBFPTR_PARAM_WIFI_GATEWAY),
                    "timeout": self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_WIFI_CONFIG_TIMEOUT),
                    "port": self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_WIFI_PORT),
                    "dhcp": self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_WIFI_DHCP),
                }
                response['success'] = True

            # ======================================================================
            # Operator & Document Commands
            # ======================================================================
            elif command == 'operator_login':
                operator_name = kwargs['operator_name']
                operator_vatin = kwargs.get('operator_vatin', '')
                self.fptr.setParam(1021, operator_name)
                if operator_vatin:
                    self.fptr.setParam(1203, operator_vatin)
                self._check_result(self.fptr.operatorLogin(), "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–∞—Å—Å–∏—Ä–∞")
                response['success'] = True
                response['message'] = f"–ö–∞—Å—Å–∏—Ä '{operator_name}' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"

            elif command == 'continue_print':
                self._check_result(self.fptr.continuePrint(), "–¥–æ–ø–µ—á–∞—Ç—ã–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞")
                response['success'] = True
                response['message'] = "–î–æ–∫—É–º–µ–Ω—Ç –¥–æ–ø–µ—á–∞—Ç–∞–Ω"

            elif command == 'check_document_closed':
                self._check_result(self.fptr.checkDocumentClosed(), "–ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞")
                response['data'] = {
                    "document_closed": self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_DOCUMENT_CLOSED),
                    "document_printed": self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_DOCUMENT_PRINTED),
                }
                response['success'] = True
                response['message'] = "–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ"

            # ======================================================================
            # Configuration Commands
            # ======================================================================
            elif command == 'configure_logging':
                # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                from .config.logging_config import LoggingConfig

                config = LoggingConfig()

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–Ω–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                if 'root_level' in kwargs:
                    config.set_root_level(kwargs['root_level'])
                if 'fiscal_printer_level' in kwargs:
                    config.set_category_level('FiscalPrinter', kwargs['fiscal_printer_level'])
                if 'transport_level' in kwargs:
                    config.set_category_level('Transport', kwargs['transport_level'])
                if 'ethernet_over_transport_level' in kwargs:
                    config.set_category_level('EthernetOverTransport', kwargs['ethernet_over_transport_level'])
                if 'device_debug_level' in kwargs:
                    config.set_category_level('DeviceDebug', kwargs['device_debug_level'])
                if 'usb_level' in kwargs:
                    config.set_category_level('USB', kwargs['usb_level'])
                if 'com_level' in kwargs:
                    config.set_category_level('COM', kwargs['com_level'])
                if 'tcp_level' in kwargs:
                    config.set_category_level('TCP', kwargs['tcp_level'])
                if 'bluetooth_level' in kwargs:
                    config.set_category_level('Bluetooth', kwargs['bluetooth_level'])

                # –í–∫–ª—é—á–∏—Ç—å –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
                if kwargs.get('enable_console', False):
                    config.enable_console_logging()

                # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Ö—Ä–∞–Ω–µ–Ω–∏—è
                if 'max_days_keep' in kwargs:
                    config.set_max_days_keep(kwargs['max_days_keep'])

                # –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                config.write_config()

                response['success'] = True
                response['message'] = "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
                response['data'] = {'config_path': config.get_config_path()}

            elif command == 'change_driver_label':
                label = kwargs['label']
                self.driver.change_label(label)
                response['success'] = True
                response['message'] = f"–ú–µ—Ç–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {label}"

            elif command == 'get_default_logging_config':
                from .config.logging_config import LoggingConfig

                config = LoggingConfig()
                default_config = config.get_default_config()

                response['success'] = True
                response['message'] = "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–ª—É—á–µ–Ω–∞"
                response['data'] = default_config

            # ======================================================================
            # Read Records Commands (–ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –§–ù –∏ –ö–ö–¢)
            # ======================================================================
            elif command == 'read_fn_document':
                document_number = kwargs['document_number']

                # –ù–∞—á–∏–Ω–∞–µ–º —á—Ç–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ –§–ù
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_RECORDS_TYPE, IFptr.LIBFPTR_RT_FN_DOCUMENT_TLVS)
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_DOCUMENT_NUMBER, document_number)
                self._check_result(self.fptr.beginReadRecords(), "–Ω–∞—á–∞–ª–∞ —á—Ç–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ –§–ù")

                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
                document_type = self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_FN_DOCUMENT_TYPE)
                document_size = self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_COUNT)
                records_id = self.fptr.getParamString(IFptr.LIBFPTR_PARAM_RECORDS_ID)

                # –ß–∏—Ç–∞–µ–º –≤—Å–µ TLV-–∑–∞–ø–∏—Å–∏
                tlv_records = []
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_RECORDS_ID, records_id)
                while self.fptr.readNextRecord() == 0:  # 0 = LIBFPTR_OK
                    tag_number = self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_TAG_NUMBER)
                    tag_name = self.fptr.getParamString(IFptr.LIBFPTR_PARAM_TAG_NAME)
                    tag_type = self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_TAG_TYPE)
                    is_complex = self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_TAG_IS_COMPLEX)
                    is_repeatable = self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_TAG_IS_REPEATABLE)

                    # –ß–∏—Ç–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
                    tag_value = None
                    try:
                        if tag_type in [4, 5, 6, 7]:  # BYTE, UINT_16, UINT_32, VLN
                            tag_value = self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_TAG_VALUE)
                        elif tag_type == 3:  # FVLN (float)
                            tag_value = self.fptr.getParamDouble(IFptr.LIBFPTR_PARAM_TAG_VALUE)
                        elif tag_type == 8:  # STRING
                            tag_value = self.fptr.getParamString(IFptr.LIBFPTR_PARAM_TAG_VALUE)
                        elif tag_type == 10:  # BOOL
                            tag_value = self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_TAG_VALUE)
                        else:  # STLV, ARRAY, BITS, UNIX_TIME
                            tag_value = list(self.fptr.getParamByteArray(IFptr.LIBFPTR_PARAM_TAG_VALUE))
                    except:
                        tag_value = list(self.fptr.getParamByteArray(IFptr.LIBFPTR_PARAM_TAG_VALUE))

                    tlv_records.append({
                        "tag_number": tag_number,
                        "tag_name": tag_name,
                        "tag_type": tag_type,
                        "tag_value": tag_value,
                        "is_complex": is_complex,
                        "is_repeatable": is_repeatable
                    })

                    self.fptr.setParam(IFptr.LIBFPTR_PARAM_RECORDS_ID, records_id)

                # –ó–∞–≤–µ—Ä—à–∞–µ–º —á—Ç–µ–Ω–∏–µ
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_RECORDS_ID, records_id)
                self._check_result(self.fptr.endReadRecords(), "–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á—Ç–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞")

                response['success'] = True
                response['message'] = f"–î–æ–∫—É–º–µ–Ω—Ç ‚Ññ{document_number} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω –∏–∑ –§–ù"
                response['data'] = {
                    "document_number": document_number,
                    "document_type": document_type,
                    "document_size": document_size,
                    "tlv_records": tlv_records
                }

            elif command == 'read_licenses':
                # –ù–∞—á–∏–Ω–∞–µ–º —á—Ç–µ–Ω–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–π
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_RECORDS_TYPE, IFptr.LIBFPTR_RT_LICENSES)
                self._check_result(self.fptr.beginReadRecords(), "–Ω–∞—á–∞–ª–∞ —á—Ç–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–π")

                records_id = self.fptr.getParamString(IFptr.LIBFPTR_PARAM_RECORDS_ID)

                # –ß–∏—Ç–∞–µ–º –≤—Å–µ –ª–∏—Ü–µ–Ω–∑–∏–∏
                licenses = []
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_RECORDS_ID, records_id)
                while self.fptr.readNextRecord() == 0:  # 0 = LIBFPTR_OK
                    license_number = self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_LICENSE_NUMBER)
                    license_name = self.fptr.getParamString(IFptr.LIBFPTR_PARAM_LICENSE_NAME)
                    date_from = self.fptr.getParamDateTime(IFptr.LIBFPTR_PARAM_LICENSE_VALID_FROM)
                    date_until = self.fptr.getParamDateTime(IFptr.LIBFPTR_PARAM_LICENSE_VALID_UNTIL)

                    licenses.append({
                        "license_number": license_number,
                        "license_name": license_name,
                        "valid_from": date_from.isoformat() if isinstance(date_from, datetime.datetime) else "1970-01-01T00:00:00",
                        "valid_until": date_until.isoformat() if isinstance(date_until, datetime.datetime) else "1970-01-01T00:00:00"
                    })

                    self.fptr.setParam(IFptr.LIBFPTR_PARAM_RECORDS_ID, records_id)

                # –ó–∞–≤–µ—Ä—à–∞–µ–º —á—Ç–µ–Ω–∏–µ
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_RECORDS_ID, records_id)
                self._check_result(self.fptr.endReadRecords(), "–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á—Ç–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–π")

                response['success'] = True
                response['message'] = f"–ü—Ä–æ—á–∏—Ç–∞–Ω–æ –ª–∏—Ü–µ–Ω–∑–∏–π: {len(licenses)}"
                response['data'] = {"licenses": licenses}

            elif command == 'read_registration_document':
                registration_number = kwargs['registration_number']

                # –ù–∞—á–∏–Ω–∞–µ–º —á—Ç–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_RECORDS_TYPE, IFptr.LIBFPTR_RT_FN_REGISTRATION_TLVS)
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_REGISTRATION_NUMBER, registration_number)
                self._check_result(self.fptr.beginReadRecords(), "–Ω–∞—á–∞–ª–∞ —á—Ç–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")

                records_id = self.fptr.getParamString(IFptr.LIBFPTR_PARAM_RECORDS_ID)

                # –ß–∏—Ç–∞–µ–º –≤—Å–µ TLV-–∑–∞–ø–∏—Å–∏
                tlv_records = []
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_RECORDS_ID, records_id)
                while self.fptr.readNextRecord() == 0:  # 0 = LIBFPTR_OK
                    tag_number = self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_TAG_NUMBER)
                    tag_name = self.fptr.getParamString(IFptr.LIBFPTR_PARAM_TAG_NAME)
                    tag_type = self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_TAG_TYPE)
                    is_complex = self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_TAG_IS_COMPLEX)
                    is_repeatable = self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_TAG_IS_REPEATABLE)

                    # –ß–∏—Ç–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
                    tag_value = None
                    try:
                        if tag_type in [4, 5, 6, 7]:  # BYTE, UINT_16, UINT_32, VLN
                            tag_value = self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_TAG_VALUE)
                        elif tag_type == 3:  # FVLN (float)
                            tag_value = self.fptr.getParamDouble(IFptr.LIBFPTR_PARAM_TAG_VALUE)
                        elif tag_type == 8:  # STRING
                            tag_value = self.fptr.getParamString(IFptr.LIBFPTR_PARAM_TAG_VALUE)
                        elif tag_type == 10:  # BOOL
                            tag_value = self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_TAG_VALUE)
                        else:  # STLV, ARRAY, BITS, UNIX_TIME
                            tag_value = list(self.fptr.getParamByteArray(IFptr.LIBFPTR_PARAM_TAG_VALUE))
                    except:
                        tag_value = list(self.fptr.getParamByteArray(IFptr.LIBFPTR_PARAM_TAG_VALUE))

                    tlv_records.append({
                        "tag_number": tag_number,
                        "tag_name": tag_name,
                        "tag_type": tag_type,
                        "tag_value": tag_value,
                        "is_complex": is_complex,
                        "is_repeatable": is_repeatable
                    })

                    self.fptr.setParam(IFptr.LIBFPTR_PARAM_RECORDS_ID, records_id)

                # –ó–∞–≤–µ—Ä—à–∞–µ–º —á—Ç–µ–Ω–∏–µ
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_RECORDS_ID, records_id)
                self._check_result(self.fptr.endReadRecords(), "–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á—Ç–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")

                response['success'] = True
                response['message'] = f"–î–æ–∫—É–º–µ–Ω—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ‚Ññ{registration_number} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω"
                response['data'] = {
                    "registration_number": registration_number,
                    "tlv_records": tlv_records
                }

            elif command == 'parse_complex_attribute':
                tag_value_bytes = bytes(kwargs['tag_value'])

                # –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–±–æ—Ä —Å–æ—Å—Ç–∞–≤–Ω–æ–≥–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_RECORDS_TYPE, IFptr.LIBFPTR_RT_PARSE_COMPLEX_ATTR)
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_TAG_VALUE, tag_value_bytes)
                self._check_result(self.fptr.beginReadRecords(), "–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–±–æ—Ä–∞ —Å–æ—Å—Ç–∞–≤–Ω–æ–≥–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞")

                records_id = self.fptr.getParamString(IFptr.LIBFPTR_PARAM_RECORDS_ID)

                # –ß–∏—Ç–∞–µ–º –≤—Å–µ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
                parsed_records = []
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_RECORDS_ID, records_id)
                while self.fptr.readNextRecord() == 0:  # 0 = LIBFPTR_OK
                    tag_number = self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_TAG_NUMBER)
                    tag_name = self.fptr.getParamString(IFptr.LIBFPTR_PARAM_TAG_NAME)
                    tag_type = self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_TAG_TYPE)
                    is_complex = self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_TAG_IS_COMPLEX)
                    is_repeatable = self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_TAG_IS_REPEATABLE)

                    # –ß–∏—Ç–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
                    tag_value = None
                    try:
                        if tag_type in [4, 5, 6, 7]:  # BYTE, UINT_16, UINT_32, VLN
                            tag_value = self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_TAG_VALUE)
                        elif tag_type == 3:  # FVLN (float)
                            tag_value = self.fptr.getParamDouble(IFptr.LIBFPTR_PARAM_TAG_VALUE)
                        elif tag_type == 8:  # STRING
                            tag_value = self.fptr.getParamString(IFptr.LIBFPTR_PARAM_TAG_VALUE)
                        elif tag_type == 10:  # BOOL
                            tag_value = self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_TAG_VALUE)
                        else:  # STLV, ARRAY, BITS, UNIX_TIME
                            tag_value = list(self.fptr.getParamByteArray(IFptr.LIBFPTR_PARAM_TAG_VALUE))
                    except:
                        tag_value = list(self.fptr.getParamByteArray(IFptr.LIBFPTR_PARAM_TAG_VALUE))

                    parsed_records.append({
                        "tag_number": tag_number,
                        "tag_name": tag_name,
                        "tag_type": tag_type,
                        "tag_value": tag_value,
                        "is_complex": is_complex,
                        "is_repeatable": is_repeatable
                    })

                    self.fptr.setParam(IFptr.LIBFPTR_PARAM_RECORDS_ID, records_id)

                # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–∑–±–æ—Ä
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_RECORDS_ID, records_id)
                self._check_result(self.fptr.endReadRecords(), "–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–∑–±–æ—Ä–∞ —Å–æ—Å—Ç–∞–≤–Ω–æ–≥–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞")

                response['success'] = True
                response['message'] = f"–°–æ—Å—Ç–∞–≤–Ω–æ–π —Ä–µ–∫–≤–∏–∑–∏—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–æ–±—Ä–∞–Ω, –Ω–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(parsed_records)}"
                response['data'] = {"parsed_records": parsed_records}

            elif command == 'read_kkt_settings':
                # –ù–∞—á–∏–Ω–∞–µ–º —á—Ç–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_RECORDS_TYPE, IFptr.LIBFPTR_RT_SETTINGS)
                self._check_result(self.fptr.beginReadRecords(), "–Ω–∞—á–∞–ª–∞ —á—Ç–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ö–ö–¢")

                records_id = self.fptr.getParamString(IFptr.LIBFPTR_PARAM_RECORDS_ID)

                # –ß–∏—Ç–∞–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                settings = []
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_RECORDS_ID, records_id)
                while self.fptr.readNextRecord() == 0:  # 0 = LIBFPTR_OK
                    setting_id = self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_SETTING_ID)
                    setting_type = self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_SETTING_TYPE)
                    setting_name = self.fptr.getParamString(IFptr.LIBFPTR_PARAM_SETTING_NAME)

                    # –ß–∏—Ç–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
                    if setting_type == IFptr.LIBFPTR_ST_NUMBER:
                        setting_value = self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_SETTING_VALUE)
                    elif setting_type == IFptr.LIBFPTR_ST_BOOL:
                        setting_value = self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_SETTING_VALUE)
                    elif setting_type == IFptr.LIBFPTR_ST_STRING:
                        setting_value = self.fptr.getParamString(IFptr.LIBFPTR_PARAM_SETTING_VALUE)
                    else:
                        setting_value = None

                    settings.append({
                        "setting_id": setting_id,
                        "setting_type": setting_type,
                        "setting_name": setting_name,
                        "setting_value": setting_value
                    })

                    self.fptr.setParam(IFptr.LIBFPTR_PARAM_RECORDS_ID, records_id)

                # –ó–∞–≤–µ—Ä—à–∞–µ–º —á—Ç–µ–Ω–∏–µ
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_RECORDS_ID, records_id)
                self._check_result(self.fptr.endReadRecords(), "–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á—Ç–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")

                response['success'] = True
                response['message'] = f"–ü—Ä–æ—á–∏—Ç–∞–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ö–ö–¢: {len(settings)}"
                response['data'] = {"settings": settings}

            elif command == 'read_last_document_journal':
                # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫—Ä—ã—Ç—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ –∂—É—Ä–Ω–∞–ª–∞
                self._check_result(self.fptr.getLastDocumentJournal(), "—á—Ç–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ –∂—É—Ä–Ω–∞–ª–∞")

                # –ü–æ–ª—É—á–∞–µ–º TLV-–º–∞—Å—Å–∏–≤
                tlv_list = self.fptr.getParamByteArray(IFptr.LIBFPTR_PARAM_TLV_LIST)

                # –ü–∞—Ä—Å–∏–º TLV-—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                tlv_structures = []
                pos = 0
                while pos < len(tlv_list):
                    if pos + 4 > len(tlv_list):
                        break

                    # –ß–∏—Ç–∞–µ–º Tag (2 –±–∞–π—Ç–∞, LE)
                    tag = tlv_list[pos] | (tlv_list[pos + 1] << 8)
                    # –ß–∏—Ç–∞–µ–º Length (2 –±–∞–π—Ç–∞, LE)
                    length = tlv_list[pos + 2] | (tlv_list[pos + 3] << 8)
                    pos += 4

                    # –ß–∏—Ç–∞–µ–º Value
                    if pos + length > len(tlv_list):
                        break

                    value = list(tlv_list[pos:pos + length])
                    pos += length

                    tlv_structures.append({
                        "tag": tag,
                        "length": length,
                        "value": value
                    })

                response['success'] = True
                response['message'] = f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ –∂—É—Ä–Ω–∞–ª–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω, TLV —Å—Ç—Ä—É–∫—Ç—É—Ä: {len(tlv_structures)}"
                response['data'] = {
                    "tlv_structures": tlv_structures,
                    "raw_bytes": list(tlv_list)
                }

            # ======================================================================
            # FN Query Data Commands (–ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –§–ù)
            # ======================================================================
            elif command == 'query_last_receipt':
                # –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —á–µ–∫–µ –∏–∑ –§–ù
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_FN_DATA_TYPE, IFptr.LIBFPTR_FNDT_LAST_RECEIPT)
                self._check_result(self.fptr.fnQueryData(), "–∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —á–µ–∫–µ")

                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —á–µ–∫–µ
                document_number = self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_DOCUMENT_NUMBER)
                receipt_sum = self.fptr.getParamDouble(IFptr.LIBFPTR_PARAM_RECEIPT_SUM)
                fiscal_sign = self.fptr.getParamString(IFptr.LIBFPTR_PARAM_FISCAL_SIGN)
                date_time = self.fptr.getParamDateTime(IFptr.LIBFPTR_PARAM_DATE_TIME)
                receipt_type = self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_RECEIPT_TYPE)

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ —á–µ–∫–∞
                receipt_type_names = {
                    IFptr.LIBFPTR_RT_SELL: "–ß–µ–∫ –ø—Ä–∏—Ö–æ–¥–∞",
                    IFptr.LIBFPTR_RT_SELL_RETURN: "–ß–µ–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø—Ä–∏—Ö–æ–¥–∞",
                    IFptr.LIBFPTR_RT_SELL_CORRECTION: "–ß–µ–∫ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –ø—Ä–∏—Ö–æ–¥–∞",
                    IFptr.LIBFPTR_RT_BUY: "–ß–µ–∫ —Ä–∞—Å—Ö–æ–¥–∞",
                    IFptr.LIBFPTR_RT_BUY_RETURN: "–ß–µ–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ä–∞—Å—Ö–æ–¥–∞",
                    IFptr.LIBFPTR_RT_BUY_CORRECTION: "–ß–µ–∫ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞",
                }
                receipt_type_name = receipt_type_names.get(receipt_type, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø ({receipt_type})")

                response['success'] = True
                response['message'] = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —á–µ–∫–µ (‚Ññ{document_number}) —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞"
                response['data'] = {
                    "document_number": document_number,
                    "receipt_sum": receipt_sum,
                    "fiscal_sign": fiscal_sign,
                    "date_time": date_time.strftime("%Y-%m-%d %H:%M:%S") if date_time else None,
                    "receipt_type": receipt_type,
                    "receipt_type_name": receipt_type_name
                }

            elif command == 'query_registration_info':
                # –ó–∞–ø—Ä–æ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ö–ö–¢
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_FN_DATA_TYPE, IFptr.LIBFPTR_FNDT_REG_INFO)
                self._check_result(self.fptr.fnQueryData(), "–∑–∞–ø—Ä–æ—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                data = {}

                # –°—Ç—Ä–æ–∫–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                data['fns_url'] = self.fptr.getParamString(1060)  # –ê–¥—Ä–µ—Å —Å–∞–π—Ç–∞ –§–ù–°
                data['organization_address'] = self.fptr.getParamString(1009)  # –ê–¥—Ä–µ—Å —Ä–∞—Å—á–µ—Ç–æ–≤
                data['organization_vatin'] = self.fptr.getParamString(1018)  # –ò–ù–ù –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                data['organization_name'] = self.fptr.getParamString(1048)  # –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                data['organization_email'] = self.fptr.getParamString(1117)  # Email –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —á–µ–∫–∞
                data['payments_address'] = self.fptr.getParamString(1187)  # –ú–µ—Å—Ç–æ —Ä–∞—Å—á–µ—Ç–æ–≤
                data['registration_number'] = self.fptr.getParamString(1037)  # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –ö–ö–¢
                data['machine_number'] = self.fptr.getParamString(1036)  # –ù–æ–º–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∞
                data['ofd_vatin'] = self.fptr.getParamString(1017)  # –ò–ù–ù –û–§–î
                data['ofd_name'] = self.fptr.getParamString(1046)  # –ù–∞–∑–≤–∞–Ω–∏–µ –û–§–î

                # –ß–∏—Å–ª–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                taxation_types = self.fptr.getParamInt(1062)  # –°–∏—Å—Ç–µ–º—ã –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è (–±–∏—Ç–æ–≤–æ–µ –ø–æ–ª–µ)
                agent_sign = self.fptr.getParamInt(1057)  # –ü—Ä–∏–∑–Ω–∞–∫ –∞–≥–µ–Ω—Ç–∞ (–±–∏—Ç–æ–≤–æ–µ –ø–æ–ª–µ)
                ffd_version = self.fptr.getParamInt(1209)  # –ù–æ–º–µ—Ä –≤–µ—Ä—Å–∏–∏ –§–§–î

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–∏—Å—Ç–µ–º—ã –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫
                taxation_systems = []
                if taxation_types & IFptr.LIBFPTR_TT_OSN:
                    taxation_systems.append("–û–±—â–∞—è")
                if taxation_types & IFptr.LIBFPTR_TT_USN_INCOME:
                    taxation_systems.append("–£–°–ù –¥–æ—Ö–æ–¥")
                if taxation_types & IFptr.LIBFPTR_TT_USN_INCOME_OUTCOME:
                    taxation_systems.append("–£–°–ù –¥–æ—Ö–æ–¥ –º–∏–Ω—É—Å —Ä–∞—Å—Ö–æ–¥")
                if taxation_types & IFptr.LIBFPTR_TT_ESN:
                    taxation_systems.append("–ï–°–•–ù")
                if taxation_types & IFptr.LIBFPTR_TT_PATENT:
                    taxation_systems.append("–ü–∞—Ç–µ–Ω—Ç–Ω–∞—è")
                data['taxation_systems'] = taxation_systems

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—Ä–∏–∑–Ω–∞–∫ –∞–≥–µ–Ω—Ç–∞
                agent_types = []
                if agent_sign == 0:
                    agent_types.append("–ü—Ä–∏–∑–Ω–∞–∫ –∞–≥–µ–Ω—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                else:
                    if agent_sign & IFptr.LIBFPTR_AT_BANK_PAYING_AGENT:
                        agent_types.append("–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–ª–∞—Ç–µ–∂–Ω—ã–π –∞–≥–µ–Ω—Ç")
                    if agent_sign & IFptr.LIBFPTR_AT_BANK_PAYING_SUBAGENT:
                        agent_types.append("–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–ª–∞—Ç–µ–∂–Ω—ã–π —Å—É–±–∞–≥–µ–Ω—Ç")
                    if agent_sign & IFptr.LIBFPTR_AT_PAYING_AGENT:
                        agent_types.append("–ü–ª–∞—Ç–µ–∂–Ω—ã–π –∞–≥–µ–Ω—Ç")
                    if agent_sign & IFptr.LIBFPTR_AT_PAYING_SUBAGENT:
                        agent_types.append("–ü–ª–∞—Ç–µ–∂–Ω—ã–π —Å—É–±–∞–≥–µ–Ω—Ç")
                    if agent_sign & IFptr.LIBFPTR_AT_ATTORNEY:
                        agent_types.append("–ü–æ–≤–µ—Ä–µ–Ω–Ω—ã–π")
                    if agent_sign & IFptr.LIBFPTR_AT_COMMISSION_AGENT:
                        agent_types.append("–ö–æ–º–∏—Å—Å–∏–æ–Ω–µ—Ä")
                    if agent_sign & IFptr.LIBFPTR_AT_ANOTHER:
                        agent_types.append("–î—Ä—É–≥–æ–π —Ç–∏–ø –∞–≥–µ–Ω—Ç–∞")
                data['agent_types'] = agent_types

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–µ—Ä—Å–∏—é –§–§–î
                ffd_versions = {
                    IFptr.LIBFPTR_FFD_UNKNOWN: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è",
                    IFptr.LIBFPTR_FFD_1_05: "–§–§–î 1.05",
                    IFptr.LIBFPTR_FFD_1_1: "–§–§–î 1.1",
                    IFptr.LIBFPTR_FFD_1_2: "–§–§–î 1.2",
                }
                data['ffd_version'] = ffd_versions.get(ffd_version, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è ({ffd_version})")
                data['ffd_version_code'] = ffd_version

                # –ë—É–ª–µ–≤—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                data['auto_mode_sign'] = self.fptr.getParamBool(1001)  # –ü—Ä–∏–∑–Ω–∞–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞
                data['offline_mode_sign'] = self.fptr.getParamBool(1002)  # –ü—Ä–∏–∑–Ω–∞–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
                data['encryption_sign'] = self.fptr.getParamBool(1056)  # –ü—Ä–∏–∑–Ω–∞–∫ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
                data['internet_sign'] = self.fptr.getParamBool(1108)  # –ü—Ä–∏–∑–Ω–∞–∫ –ö–ö–¢ –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤ –≤ —Å–µ—Ç–∏ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç
                data['service_sign'] = self.fptr.getParamBool(1109)  # –ü—Ä–∏–∑–Ω–∞–∫ —Ä–∞—Å—á–µ—Ç–æ–≤ –∑–∞ —É—Å–ª—É–≥–∏
                data['bso_sign'] = self.fptr.getParamBool(1110)  # –ü—Ä–∏–∑–Ω–∞–∫ –ê–° –ë–°–û

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ (–º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ —Å—Ç–∞—Ä—ã—Ö –§–§–î)
                try:
                    data['lottery_sign'] = self.fptr.getParamBool(1126)  # –ü—Ä–∏–∑–Ω–∞–∫ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –ª–æ—Ç–µ—Ä–µ–π
                    data['gambling_sign'] = self.fptr.getParamBool(1193)  # –ü—Ä–∏–∑–Ω–∞–∫ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∞–∑–∞—Ä—Ç–Ω—ã—Ö –∏–≥—Ä
                    data['excise_sign'] = self.fptr.getParamBool(1207)  # –ü—Ä–∏–∑–Ω–∞–∫ –ø–æ–¥–∞–∫—Ü–∏–∑–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
                    data['machine_installation_sign'] = self.fptr.getParamBool(1221)  # –ü—Ä–∏–∑–Ω–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –≤ –∞–≤—Ç–æ–º–∞—Ç–µ
                except:
                    pass  # –≠—Ç–∏ –ø–æ–ª—è –º–æ–≥—É—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —á–µ—Ä–µ–∑ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
                try:
                    data['trade_marked_products'] = self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_TRADE_MARKED_PRODUCTS)
                    data['insurance_activity'] = self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_INSURANCE_ACTIVITY)
                    data['pawn_shop_activity'] = self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_PAWN_SHOP_ACTIVITY)
                    data['vending'] = self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_VENDING)
                    data['catering'] = self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_CATERING)
                    data['wholesale'] = self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_WHOLESALE)
                except:
                    pass  # –≠—Ç–∏ –ø–æ–ª—è –º–æ–≥—É—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å

                response['success'] = True
                response['message'] = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ö–ö–¢ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã"
                response['data'] = data

            elif command == 'query_fn_info':
                # –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —Å—Ç–∞—Ç—É—Å–∞ –§–ù
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_FN_DATA_TYPE, IFptr.LIBFPTR_FNDT_FN_INFO)
                self._check_result(self.fptr.fnQueryData(), "–∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –§–ù")

                data = {
                    'fn_serial': self.fptr.getParamString(IFptr.LIBFPTR_PARAM_SERIAL_NUMBER),
                    'fn_version': self.fptr.getParamString(IFptr.LIBFPTR_PARAM_FN_VERSION),
                }

                # –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –§–ù (—Ç–æ–ª—å–∫–æ –¥–ª—è –§–ù-–ú)
                try:
                    data['fn_execution'] = self.fptr.getParamString(IFptr.LIBFPTR_PARAM_FN_EXECUTION)
                except:
                    pass

                # –¢–∏–ø –§–ù
                fn_type = self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_FN_TYPE)
                fn_types = {
                    IFptr.LIBFPTR_FNT_UNKNOWN: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π",
                    IFptr.LIBFPTR_FNT_DEBUG: "–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –≤–µ—Ä—Å–∏—è",
                    IFptr.LIBFPTR_FNT_RELEASE: "–ë–æ–µ–≤–∞—è –≤–µ—Ä—Å–∏—è"
                }
                data['fn_type'] = fn_types.get(fn_type, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π ({fn_type})")
                data['fn_type_code'] = fn_type

                # –°–æ—Å—Ç–æ—è–Ω–∏–µ –§–ù
                fn_state = self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_FN_STATE)
                fn_states = {
                    IFptr.LIBFPTR_FNS_INITIAL: "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –§–ù",
                    IFptr.LIBFPTR_FNS_CONFIGURED: "–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏",
                    IFptr.LIBFPTR_FNS_FISCAL_MODE: "–§–∏—Å–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º",
                    IFptr.LIBFPTR_FNS_POSTFISCAL_MODE: "–ü–æ—Å—Ç—Ñ–∏—Å–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º",
                    IFptr.LIBFPTR_FNS_ACCESS_ARCHIVE: "–î–æ—Å—Ç—É–ø –∫ –∞—Ä—Ö–∏–≤—É"
                }
                data['fn_state'] = fn_states.get(fn_state, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ ({fn_state})")
                data['fn_state_code'] = fn_state

                # –§–ª–∞–≥–∏ –∏ —Å—Ç–∞—Ç—É—Å—ã
                data['fn_flags'] = self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_FN_FLAGS)
                data['fn_need_replacement'] = self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_FN_NEED_REPLACEMENT)
                data['fn_resource_exhausted'] = self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_FN_RESOURCE_EXHAUSTED)
                data['fn_memory_overflow'] = self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_FN_MEMORY_OVERFLOW)
                data['fn_ofd_timeout'] = self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_FN_OFD_TIMEOUT)
                data['fn_critical_error'] = self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_FN_CRITICAL_ERROR)

                # URI —Å–µ—Ä–≤–µ—Ä–∞ –û–ö–ü
                fn_contains_uri = self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_FN_CONTAINS_KEYS_UPDATER_SERVER_URI)
                data['fn_contains_keys_updater_server_uri'] = fn_contains_uri
                if fn_contains_uri:
                    data['fn_keys_updater_server_uri'] = self.fptr.getParamString(IFptr.LIBFPTR_PARAM_FN_KEYS_UPDATER_SERVER_URI)

                response['success'] = True
                response['message'] = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –§–ù —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞"
                response['data'] = data

            elif command == 'query_ofd_exchange_status':
                # –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –æ–±–º–µ–Ω–∞ —Å –û–§–î
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_FN_DATA_TYPE, IFptr.LIBFPTR_FNDT_OFD_EXCHANGE_STATUS)
                self._check_result(self.fptr.fnQueryData(), "–∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–±–º–µ–Ω–∞ —Å –û–§–î")

                exchange_status = self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_OFD_EXCHANGE_STATUS)

                # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –±–∏—Ç–æ–≤–æ–µ –ø–æ–ª–µ —Å—Ç–∞—Ç—É—Å–∞
                status_flags = []
                if exchange_status & (1 << 0):
                    status_flags.append("–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                if exchange_status & (1 << 1):
                    status_flags.append("–ï—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –û–§–î")
                if exchange_status & (1 << 2):
                    status_flags.append("–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–∫–≤–∏—Ç–∞–Ω—Ü–∏–∏) –æ—Ç –û–§–î")
                if exchange_status & (1 << 3):
                    status_flags.append("–ï—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞ –æ—Ç –û–§–î")
                if exchange_status & (1 << 4):
                    status_flags.append("–ò–∑–º–µ–Ω–∏–ª–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –û–§–î")
                if exchange_status & (1 << 5):
                    status_flags.append("–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É –æ—Ç –û–§–î")

                date_time = self.fptr.getParamDateTime(IFptr.LIBFPTR_PARAM_DATE_TIME)
                okp_time = self.fptr.getParamDateTime(IFptr.LIBFPTR_PARAM_LAST_SUCCESSFUL_OKP)

                data = {
                    'exchange_status_code': exchange_status,
                    'exchange_status_flags': status_flags,
                    'unsent_documents_count': self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_DOCUMENTS_COUNT),
                    'first_unsent_document_number': self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_DOCUMENT_NUMBER),
                    'ofd_message_read': self.fptr.getParamBool(IFptr.LIBFPTR_PARAM_OFD_MESSAGE_READ),
                    'first_unsent_date_time': date_time.strftime("%Y-%m-%d %H:%M:%S") if date_time else None,
                    'last_successful_okp_time': okp_time.strftime("%Y-%m-%d %H:%M:%S") if okp_time else None,
                }

                response['success'] = True
                response['message'] = "–°—Ç–∞—Ç—É—Å –æ–±–º–µ–Ω–∞ —Å –û–§–î —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω"
                response['data'] = data

            elif command == 'query_shift_info':
                # –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–π —Å–º–µ–Ω–µ –≤ –§–ù
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_FN_DATA_TYPE, IFptr.LIBFPTR_FNDT_SHIFT)
                self._check_result(self.fptr.fnQueryData(), "–∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–º–µ–Ω–µ")

                data = {
                    'receipts_count': self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_RECEIPT_NUMBER),
                    'shift_number': self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_SHIFT_NUMBER),
                }

                response['success'] = True
                response['message'] = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–º–µ–Ω–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞"
                response['data'] = data

            elif command == 'query_last_document':
                # –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ñ–∏—Å–∫–∞–ª—å–Ω–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_FN_DATA_TYPE, IFptr.LIBFPTR_FNDT_LAST_DOCUMENT)
                self._check_result(self.fptr.fnQueryData(), "–∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ")

                date_time = self.fptr.getParamDateTime(IFptr.LIBFPTR_PARAM_DATE_TIME)

                data = {
                    'document_number': self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_DOCUMENT_NUMBER),
                    'fiscal_sign': self.fptr.getParamString(IFptr.LIBFPTR_PARAM_FISCAL_SIGN),
                    'date_time': date_time.strftime("%Y-%m-%d %H:%M:%S") if date_time else None,
                }

                response['success'] = True
                response['message'] = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞"
                response['data'] = data

            elif command == 'query_fn_validity':
                # –ó–∞–ø—Ä–æ—Å —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –§–ù
                self.fptr.setParam(IFptr.LIBFPTR_PARAM_FN_DATA_TYPE, IFptr.LIBFPTR_FNDT_VALIDITY)
                self._check_result(self.fptr.fnQueryData(), "–∑–∞–ø—Ä–æ—Å–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –§–ù")

                date_time = self.fptr.getParamDateTime(IFptr.LIBFPTR_PARAM_DATE_TIME)

                data = {
                    'validity_date': date_time.strftime("%Y-%m-%d") if date_time else None,
                    'registrations_count': self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_REGISTRATIONS_COUNT),
                    'registrations_remain': self.fptr.getParamInt(IFptr.LIBFPTR_PARAM_REGISTRATIONS_REMAIN),
                }

                response['success'] = True
                response['message'] = "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –§–ù —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω"
                response['data'] = data

            else:
                response['message'] = f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}"

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã '{command}': {str(e)}"
            logger.error(error_msg)
            response["message"] = error_msg
            if isinstance(e, AtolDriverError):
                response['data'] = e.to_dict()

        return response

class DeviceWorker:
    """–í–æ—Ä–∫–µ—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∏—Å–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""

    def __init__(self, device_id: str, device_config: dict):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–æ—Ä–∫–µ—Ä–∞ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞

        Args:
            device_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            device_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        """
        self.device_id = device_id
        self.device_config = device_config
        self.processor = None  # –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
        self.command_channel = f"command_fr_channel_{device_id}"
        self.response_channel = f"command_fr_channel_{device_id}_response"

        logger.info(f"‚úì –í–æ—Ä–∫–µ—Ä –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ '{device_id}' –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"  - –ö–∞–Ω–∞–ª –∫–æ–º–∞–Ω–¥: {self.command_channel}")
        logger.info(f"  - –ö–∞–Ω–∞–ª –æ—Ç–≤–µ—Ç–æ–≤: {self.response_channel}")

    def _get_processor(self, redis_client=None):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∫–æ–º–∞–Ω–¥ (lazy initialization)"""
        if self.processor is None:
            self.processor = CommandProcessor(redis_client=redis_client)
            logger.info(f"[{self.device_id}] –°–æ–∑–¥–∞–Ω –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∫–æ–º–∞–Ω–¥")
        return self.processor

    def process_message(self, r: redis.Redis, message: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞"""
        if message.get('type') == 'message':
            if message.get('data') == 'ping':
                return

            try:
                command_data = json.loads(message.get('data'))
                logger.debug(f"[{self.device_id}] –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {command_data}")

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º lazy initialization –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞, –ø–µ—Ä–µ–¥–∞–µ–º redis –∫–ª–∏–µ–Ω—Ç
                processor = self._get_processor(redis_client=r)
                response = processor.process_command(command_data)
                r.publish(self.response_channel, json.dumps(response, ensure_ascii=False))
                logger.debug(f"[{self.device_id}] –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {response}")

            except json.JSONDecodeError as e:
                logger.error(f"[{self.device_id}] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–º–∞–Ω–¥—ã: {e}")
            except Exception as e:
                logger.error(f"[{self.device_id}] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")


def get_device_configs() -> Dict[str, dict]:
    """
    –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è

    –§–æ—Ä–º–∞—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:
    DEVICES=device1,device2,device3
    DEVICE_device1_TYPE=tcp
    DEVICE_device1_HOST=192.168.1.100
    DEVICE_device1_PORT=5555
    """
    import os

    devices = {}
    devices_list = os.getenv('DEVICES', 'default').split(',')

    for device_id in devices_list:
        device_id = device_id.strip()
        prefix = f"DEVICE_{device_id}_"

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        device_config = {
            'connection_type': os.getenv(f"{prefix}TYPE", settings.atol_connection_type),
            'host': os.getenv(f"{prefix}HOST", settings.atol_host),
            'port': int(os.getenv(f"{prefix}PORT", settings.atol_port)),
        }

        devices[device_id] = device_config
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ '{device_id}': {device_config}")

    return devices


def listen_to_redis():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –æ—Ç –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
    r = redis.Redis(host=settings.redis_host, port=settings.redis_port, decode_responses=True)
    pubsub = r.pubsub()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    device_configs = get_device_configs()

    # –°–æ–∑–¥–∞–µ–º –≤–æ—Ä–∫–µ—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    workers = {}
    for device_id, device_config in device_configs.items():
        worker = DeviceWorker(device_id, device_config)
        workers[device_id] = worker
        pubsub.subscribe(worker.command_channel)

    logger.info(f"üéß –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –æ—Ç {len(workers)} —É—Å—Ç—Ä–æ–π—Å—Ç–≤...")

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤
    for message in pubsub.listen():
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–º—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        channel = message.get('channel')
        if channel:
            for device_id, worker in workers.items():
                if channel == worker.command_channel:
                    worker.process_message(r, message)
                    break


if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Multi-Device Redis Queue Worker –¥–ª—è –ê–¢–û–õ –ö–ö–¢")
    listen_to_redis()